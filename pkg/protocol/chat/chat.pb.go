// Copyright Â© 2023 OpenIM open source community. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v5.27.0
// source: chat/chat.proto

package chat

import (
	context "context"
	common "github.com/openimsdk/chat/pkg/protocol/common"
	sdkwss "github.com/openimsdk/chat/pkg/protocol/sdkwss"
	wrapperspb "github.com/openimsdk/protocol/wrapperspb"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OnlineTime struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp"`
}

func (x *OnlineTime) Reset() {
	*x = OnlineTime{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OnlineTime) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OnlineTime) ProtoMessage() {}

func (x *OnlineTime) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OnlineTime.ProtoReflect.Descriptor instead.
func (*OnlineTime) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{0}
}

func (x *OnlineTime) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *OnlineTime) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type GetUsersTimeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,2,rep,name=userIDs,proto3" json:"userIDs"`
}

func (x *GetUsersTimeReq) Reset() {
	*x = GetUsersTimeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersTimeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersTimeReq) ProtoMessage() {}

func (x *GetUsersTimeReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersTimeReq.ProtoReflect.Descriptor instead.
func (*GetUsersTimeReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{1}
}

func (x *GetUsersTimeReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type GetUsersTimeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeList []*OnlineTime `protobuf:"bytes,1,rep,name=timeList,proto3" json:"timeList"`
}

func (x *GetUsersTimeResp) Reset() {
	*x = GetUsersTimeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUsersTimeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUsersTimeResp) ProtoMessage() {}

func (x *GetUsersTimeResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUsersTimeResp.ProtoReflect.Descriptor instead.
func (*GetUsersTimeResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{2}
}

func (x *GetUsersTimeResp) GetTimeList() []*OnlineTime {
	if x != nil {
		return x.TimeList
	}
	return nil
}

type UserIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address  string `protobuf:"bytes,1,opt,name=address,proto3" json:"address"`
	DeviceID string `protobuf:"bytes,2,opt,name=deviceID,proto3" json:"deviceID"`
	Platform int32  `protobuf:"varint,3,opt,name=platform,proto3" json:"platform"`
	Account  string `protobuf:"bytes,4,opt,name=account,proto3" json:"account"`
}

func (x *UserIdentity) Reset() {
	*x = UserIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserIdentity) ProtoMessage() {}

func (x *UserIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserIdentity.ProtoReflect.Descriptor instead.
func (*UserIdentity) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{3}
}

func (x *UserIdentity) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *UserIdentity) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *UserIdentity) GetPlatform() int32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *UserIdentity) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type UpdateUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID           string                  `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Account          *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=account,proto3" json:"account"`
	Nickname         *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname"`
	FaceURL          *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=faceURL,proto3" json:"faceURL"`
	CoverURL         *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=coverURL,proto3" json:"coverURL"`
	About            *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=about,proto3" json:"about"`
	AllowAddFriend   *wrapperspb.Int32Value  `protobuf:"bytes,7,opt,name=allowAddFriend,proto3" json:"allowAddFriend"`
	AllowBeep        *wrapperspb.Int32Value  `protobuf:"bytes,8,opt,name=allowBeep,proto3" json:"allowBeep"`
	AllowVibration   *wrapperspb.Int32Value  `protobuf:"bytes,9,opt,name=allowVibration,proto3" json:"allowVibration"`
	GlobalRecvMsgOpt *wrapperspb.Int32Value  `protobuf:"bytes,10,opt,name=globalRecvMsgOpt,proto3" json:"globalRecvMsgOpt"`
	RegisterType     *wrapperspb.Int32Value  `protobuf:"bytes,11,opt,name=RegisterType,proto3" json:"RegisterType"`
}

func (x *UpdateUserInfoReq) Reset() {
	*x = UpdateUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoReq) ProtoMessage() {}

func (x *UpdateUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoReq.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{4}
}

func (x *UpdateUserInfoReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *UpdateUserInfoReq) GetAccount() *wrapperspb.StringValue {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *UpdateUserInfoReq) GetNickname() *wrapperspb.StringValue {
	if x != nil {
		return x.Nickname
	}
	return nil
}

func (x *UpdateUserInfoReq) GetFaceURL() *wrapperspb.StringValue {
	if x != nil {
		return x.FaceURL
	}
	return nil
}

func (x *UpdateUserInfoReq) GetCoverURL() *wrapperspb.StringValue {
	if x != nil {
		return x.CoverURL
	}
	return nil
}

func (x *UpdateUserInfoReq) GetAbout() *wrapperspb.StringValue {
	if x != nil {
		return x.About
	}
	return nil
}

func (x *UpdateUserInfoReq) GetAllowAddFriend() *wrapperspb.Int32Value {
	if x != nil {
		return x.AllowAddFriend
	}
	return nil
}

func (x *UpdateUserInfoReq) GetAllowBeep() *wrapperspb.Int32Value {
	if x != nil {
		return x.AllowBeep
	}
	return nil
}

func (x *UpdateUserInfoReq) GetAllowVibration() *wrapperspb.Int32Value {
	if x != nil {
		return x.AllowVibration
	}
	return nil
}

func (x *UpdateUserInfoReq) GetGlobalRecvMsgOpt() *wrapperspb.Int32Value {
	if x != nil {
		return x.GlobalRecvMsgOpt
	}
	return nil
}

func (x *UpdateUserInfoReq) GetRegisterType() *wrapperspb.Int32Value {
	if x != nil {
		return x.RegisterType
	}
	return nil
}

type UpdateUserInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  string                  `protobuf:"bytes,1,opt,name=account,proto3" json:"account"`
	NickName string                  `protobuf:"bytes,2,opt,name=nickName,proto3" json:"nickName"`
	FaceURL  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=faceURL,proto3" json:"faceURL"`
	CoverURL *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=coverURL,proto3" json:"coverURL"`
	About    *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=about,proto3" json:"about"`
}

func (x *UpdateUserInfoResp) Reset() {
	*x = UpdateUserInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserInfoResp) ProtoMessage() {}

func (x *UpdateUserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserInfoResp.ProtoReflect.Descriptor instead.
func (*UpdateUserInfoResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{5}
}

func (x *UpdateUserInfoResp) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *UpdateUserInfoResp) GetNickName() string {
	if x != nil {
		return x.NickName
	}
	return ""
}

func (x *UpdateUserInfoResp) GetFaceURL() *wrapperspb.StringValue {
	if x != nil {
		return x.FaceURL
	}
	return nil
}

func (x *UpdateUserInfoResp) GetCoverURL() *wrapperspb.StringValue {
	if x != nil {
		return x.CoverURL
	}
	return nil
}

func (x *UpdateUserInfoResp) GetAbout() *wrapperspb.StringValue {
	if x != nil {
		return x.About
	}
	return nil
}

type FindUserPublicInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
}

func (x *FindUserPublicInfoReq) Reset() {
	*x = FindUserPublicInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserPublicInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserPublicInfoReq) ProtoMessage() {}

func (x *FindUserPublicInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserPublicInfoReq.ProtoReflect.Descriptor instead.
func (*FindUserPublicInfoReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{6}
}

func (x *FindUserPublicInfoReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type FindUserPublicInfoRespOfOne struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *common.UserPublicInfo `protobuf:"bytes,1,opt,name=user,proto3" json:"user"`
}

func (x *FindUserPublicInfoRespOfOne) Reset() {
	*x = FindUserPublicInfoRespOfOne{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserPublicInfoRespOfOne) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserPublicInfoRespOfOne) ProtoMessage() {}

func (x *FindUserPublicInfoRespOfOne) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserPublicInfoRespOfOne.ProtoReflect.Descriptor instead.
func (*FindUserPublicInfoRespOfOne) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{7}
}

func (x *FindUserPublicInfoRespOfOne) GetUser() *common.UserPublicInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type FindUserPublicInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*common.UserPublicInfo `protobuf:"bytes,1,rep,name=users,proto3" json:"users"`
}

func (x *FindUserPublicInfoResp) Reset() {
	*x = FindUserPublicInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserPublicInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserPublicInfoResp) ProtoMessage() {}

func (x *FindUserPublicInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserPublicInfoResp.ProtoReflect.Descriptor instead.
func (*FindUserPublicInfoResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{8}
}

func (x *FindUserPublicInfoResp) GetUsers() []*common.UserPublicInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

type SearchUserPublicInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    string                    `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword"`
	Pagination *sdkwss.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	Genders    int32                     `protobuf:"varint,3,opt,name=genders,proto3" json:"genders"`
}

func (x *SearchUserPublicInfoReq) Reset() {
	*x = SearchUserPublicInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserPublicInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserPublicInfoReq) ProtoMessage() {}

func (x *SearchUserPublicInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserPublicInfoReq.ProtoReflect.Descriptor instead.
func (*SearchUserPublicInfoReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{9}
}

func (x *SearchUserPublicInfoReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchUserPublicInfoReq) GetPagination() *sdkwss.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *SearchUserPublicInfoReq) GetGenders() int32 {
	if x != nil {
		return x.Genders
	}
	return 0
}

type SearchUserPublicInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32                   `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Users []*common.UserPublicInfo `protobuf:"bytes,2,rep,name=users,proto3" json:"users"`
}

func (x *SearchUserPublicInfoResp) Reset() {
	*x = SearchUserPublicInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserPublicInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserPublicInfoResp) ProtoMessage() {}

func (x *SearchUserPublicInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserPublicInfoResp.ProtoReflect.Descriptor instead.
func (*SearchUserPublicInfoResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{10}
}

func (x *SearchUserPublicInfoResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchUserPublicInfoResp) GetUsers() []*common.UserPublicInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

type FindUserFullInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
}

func (x *FindUserFullInfoReq) Reset() {
	*x = FindUserFullInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserFullInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserFullInfoReq) ProtoMessage() {}

func (x *FindUserFullInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserFullInfoReq.ProtoReflect.Descriptor instead.
func (*FindUserFullInfoReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{11}
}

func (x *FindUserFullInfoReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type FindUserFullInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Users []*common.UserFullInfo `protobuf:"bytes,1,rep,name=users,proto3" json:"users"`
}

func (x *FindUserFullInfoResp) Reset() {
	*x = FindUserFullInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserFullInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserFullInfoResp) ProtoMessage() {}

func (x *FindUserFullInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserFullInfoResp.ProtoReflect.Descriptor instead.
func (*FindUserFullInfoResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{12}
}

func (x *FindUserFullInfoResp) GetUsers() []*common.UserFullInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

type GetAllUserIDsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAllUserIDsReq) Reset() {
	*x = GetAllUserIDsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllUserIDsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUserIDsReq) ProtoMessage() {}

func (x *GetAllUserIDsReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUserIDsReq.ProtoReflect.Descriptor instead.
func (*GetAllUserIDsReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{13}
}

type GetAllUserIDsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
}

func (x *GetAllUserIDsResp) Reset() {
	*x = GetAllUserIDsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllUserIDsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllUserIDsResp) ProtoMessage() {}

func (x *GetAllUserIDsResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllUserIDsResp.ProtoReflect.Descriptor instead.
func (*GetAllUserIDsResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{14}
}

func (x *GetAllUserIDsResp) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type SendVerifyCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UsedFor        int32  `protobuf:"varint,1,opt,name=usedFor,proto3" json:"usedFor"`
	Ip             string `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip"`
	InvitationCode string `protobuf:"bytes,3,opt,name=invitationCode,proto3" json:"invitationCode"`
	DeviceID       string `protobuf:"bytes,4,opt,name=deviceID,proto3" json:"deviceID"`
	Platform       int32  `protobuf:"varint,5,opt,name=platform,proto3" json:"platform"`
	AreaCode       string `protobuf:"bytes,6,opt,name=areaCode,proto3" json:"areaCode"`
	PhoneNumber    string `protobuf:"bytes,7,opt,name=phoneNumber,proto3" json:"phoneNumber"`
	Email          string `protobuf:"bytes,8,opt,name=email,proto3" json:"email"`
}

func (x *SendVerifyCodeReq) Reset() {
	*x = SendVerifyCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendVerifyCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendVerifyCodeReq) ProtoMessage() {}

func (x *SendVerifyCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendVerifyCodeReq.ProtoReflect.Descriptor instead.
func (*SendVerifyCodeReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{15}
}

func (x *SendVerifyCodeReq) GetUsedFor() int32 {
	if x != nil {
		return x.UsedFor
	}
	return 0
}

func (x *SendVerifyCodeReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *SendVerifyCodeReq) GetInvitationCode() string {
	if x != nil {
		return x.InvitationCode
	}
	return ""
}

func (x *SendVerifyCodeReq) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *SendVerifyCodeReq) GetPlatform() int32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *SendVerifyCodeReq) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

func (x *SendVerifyCodeReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *SendVerifyCodeReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type SendVerifyCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SendVerifyCodeResp) Reset() {
	*x = SendVerifyCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SendVerifyCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendVerifyCodeResp) ProtoMessage() {}

func (x *SendVerifyCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendVerifyCodeResp.ProtoReflect.Descriptor instead.
func (*SendVerifyCodeResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{16}
}

type VerifyCodeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaCode    string `protobuf:"bytes,1,opt,name=areaCode,proto3" json:"areaCode"`
	PhoneNumber string `protobuf:"bytes,2,opt,name=phoneNumber,proto3" json:"phoneNumber"`
	VerifyCode  string `protobuf:"bytes,3,opt,name=verifyCode,proto3" json:"verifyCode"`
	Email       string `protobuf:"bytes,4,opt,name=email,proto3" json:"email"`
}

func (x *VerifyCodeReq) Reset() {
	*x = VerifyCodeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyCodeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCodeReq) ProtoMessage() {}

func (x *VerifyCodeReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCodeReq.ProtoReflect.Descriptor instead.
func (*VerifyCodeReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{17}
}

func (x *VerifyCodeReq) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

func (x *VerifyCodeReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *VerifyCodeReq) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

func (x *VerifyCodeReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type VerifyCodeResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *VerifyCodeResp) Reset() {
	*x = VerifyCodeResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifyCodeResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifyCodeResp) ProtoMessage() {}

func (x *VerifyCodeResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifyCodeResp.ProtoReflect.Descriptor instead.
func (*VerifyCodeResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{18}
}

type ChallengeNonceReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey string `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey"`
}

func (x *ChallengeNonceReq) Reset() {
	*x = ChallengeNonceReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeNonceReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeNonceReq) ProtoMessage() {}

func (x *ChallengeNonceReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeNonceReq.ProtoReflect.Descriptor instead.
func (*ChallengeNonceReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{19}
}

func (x *ChallengeNonceReq) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

type ChallengeNonceResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce string `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce"`
}

func (x *ChallengeNonceResp) Reset() {
	*x = ChallengeNonceResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChallengeNonceResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChallengeNonceResp) ProtoMessage() {}

func (x *ChallengeNonceResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChallengeNonceResp.ProtoReflect.Descriptor instead.
func (*ChallengeNonceResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{20}
}

func (x *ChallengeNonceResp) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

type RegisterUserInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID       string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Nickname     string `protobuf:"bytes,2,opt,name=nickname,proto3" json:"nickname"`
	FaceURL      string `protobuf:"bytes,3,opt,name=faceURL,proto3" json:"faceURL"`
	Account      string `protobuf:"bytes,4,opt,name=account,proto3" json:"account"`
	PublicKey    string `protobuf:"bytes,5,opt,name=publicKey,proto3" json:"publicKey"`
	Address      string `protobuf:"bytes,6,opt,name=Address,proto3" json:"Address"`
	RegisterType int32  `protobuf:"varint,7,opt,name=RegisterType,proto3" json:"RegisterType"`
}

func (x *RegisterUserInfo) Reset() {
	*x = RegisterUserInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserInfo) ProtoMessage() {}

func (x *RegisterUserInfo) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserInfo.ProtoReflect.Descriptor instead.
func (*RegisterUserInfo) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{21}
}

func (x *RegisterUserInfo) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RegisterUserInfo) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *RegisterUserInfo) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *RegisterUserInfo) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

func (x *RegisterUserInfo) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

func (x *RegisterUserInfo) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *RegisterUserInfo) GetRegisterType() int32 {
	if x != nil {
		return x.RegisterType
	}
	return 0
}

type RegisterUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nonce     string            `protobuf:"bytes,6,opt,name=nonce,proto3" json:"nonce"`
	Signature string            `protobuf:"bytes,7,opt,name=signature,proto3" json:"signature"`
	Ip        string            `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip"`
	DeviceID  string            `protobuf:"bytes,2,opt,name=deviceID,proto3" json:"deviceID"`
	Platform  int32             `protobuf:"varint,3,opt,name=platform,proto3" json:"platform"`
	AutoLogin bool              `protobuf:"varint,4,opt,name=autoLogin,proto3" json:"autoLogin"`
	User      *RegisterUserInfo `protobuf:"bytes,5,opt,name=user,proto3" json:"user"`
}

func (x *RegisterUserReq) Reset() {
	*x = RegisterUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserReq) ProtoMessage() {}

func (x *RegisterUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserReq.ProtoReflect.Descriptor instead.
func (*RegisterUserReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{22}
}

func (x *RegisterUserReq) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *RegisterUserReq) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *RegisterUserReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *RegisterUserReq) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *RegisterUserReq) GetPlatform() int32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *RegisterUserReq) GetAutoLogin() bool {
	if x != nil {
		return x.AutoLogin
	}
	return false
}

func (x *RegisterUserReq) GetUser() *RegisterUserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type RegisterUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID    string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	ChatToken string `protobuf:"bytes,3,opt,name=chatToken,proto3" json:"chatToken"`
}

func (x *RegisterUserResp) Reset() {
	*x = RegisterUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterUserResp) ProtoMessage() {}

func (x *RegisterUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterUserResp.ProtoReflect.Descriptor instead.
func (*RegisterUserResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{23}
}

func (x *RegisterUserResp) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *RegisterUserResp) GetChatToken() string {
	if x != nil {
		return x.ChatToken
	}
	return ""
}

type AddUserAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip       string            `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip"`
	DeviceID string            `protobuf:"bytes,2,opt,name=deviceID,proto3" json:"deviceID"`
	Platform int32             `protobuf:"varint,3,opt,name=platform,proto3" json:"platform"`
	User     *RegisterUserInfo `protobuf:"bytes,4,opt,name=user,proto3" json:"user"`
}

func (x *AddUserAccountReq) Reset() {
	*x = AddUserAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserAccountReq) ProtoMessage() {}

func (x *AddUserAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserAccountReq.ProtoReflect.Descriptor instead.
func (*AddUserAccountReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{24}
}

func (x *AddUserAccountReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *AddUserAccountReq) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *AddUserAccountReq) GetPlatform() int32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *AddUserAccountReq) GetUser() *RegisterUserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type AddUserAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddUserAccountResp) Reset() {
	*x = AddUserAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddUserAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddUserAccountResp) ProtoMessage() {}

func (x *AddUserAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddUserAccountResp.ProtoReflect.Descriptor instead.
func (*AddUserAccountResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{25}
}

type LoginReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address   string `protobuf:"bytes,1,opt,name=address,proto3" json:"address"`
	Platform  int32  `protobuf:"varint,2,opt,name=platform,proto3" json:"platform"`
	DeviceID  string `protobuf:"bytes,3,opt,name=deviceID,proto3" json:"deviceID"`
	Ip        string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip"`
	Nonce     string `protobuf:"bytes,5,opt,name=nonce,proto3" json:"nonce"`
	Signature string `protobuf:"bytes,6,opt,name=signature,proto3" json:"signature"`
	PublicKey string `protobuf:"bytes,7,opt,name=publicKey,proto3" json:"publicKey"`
}

func (x *LoginReq) Reset() {
	*x = LoginReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginReq) ProtoMessage() {}

func (x *LoginReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginReq.ProtoReflect.Descriptor instead.
func (*LoginReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{26}
}

func (x *LoginReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *LoginReq) GetPlatform() int32 {
	if x != nil {
		return x.Platform
	}
	return 0
}

func (x *LoginReq) GetDeviceID() string {
	if x != nil {
		return x.DeviceID
	}
	return ""
}

func (x *LoginReq) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *LoginReq) GetNonce() string {
	if x != nil {
		return x.Nonce
	}
	return ""
}

func (x *LoginReq) GetSignature() string {
	if x != nil {
		return x.Signature
	}
	return ""
}

func (x *LoginReq) GetPublicKey() string {
	if x != nil {
		return x.PublicKey
	}
	return ""
}

type ResetPasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AreaCode    string `protobuf:"bytes,1,opt,name=areaCode,proto3" json:"areaCode"`
	PhoneNumber string `protobuf:"bytes,2,opt,name=phoneNumber,proto3" json:"phoneNumber"`
	VerifyCode  string `protobuf:"bytes,3,opt,name=verifyCode,proto3" json:"verifyCode"`
	Password    string `protobuf:"bytes,4,opt,name=password,proto3" json:"password"`
	Email       string `protobuf:"bytes,5,opt,name=email,proto3" json:"email"`
}

func (x *ResetPasswordReq) Reset() {
	*x = ResetPasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordReq) ProtoMessage() {}

func (x *ResetPasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordReq.ProtoReflect.Descriptor instead.
func (*ResetPasswordReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{27}
}

func (x *ResetPasswordReq) GetAreaCode() string {
	if x != nil {
		return x.AreaCode
	}
	return ""
}

func (x *ResetPasswordReq) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *ResetPasswordReq) GetVerifyCode() string {
	if x != nil {
		return x.VerifyCode
	}
	return ""
}

func (x *ResetPasswordReq) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ResetPasswordReq) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

type ResetPasswordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ResetPasswordResp) Reset() {
	*x = ResetPasswordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPasswordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordResp) ProtoMessage() {}

func (x *ResetPasswordResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordResp.ProtoReflect.Descriptor instead.
func (*ResetPasswordResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{28}
}

type ChangePasswordReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID          string `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	CurrentPassword string `protobuf:"bytes,2,opt,name=currentPassword,proto3" json:"currentPassword"`
	NewPassword     string `protobuf:"bytes,3,opt,name=newPassword,proto3" json:"newPassword"`
}

func (x *ChangePasswordReq) Reset() {
	*x = ChangePasswordReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePasswordReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordReq) ProtoMessage() {}

func (x *ChangePasswordReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordReq.ProtoReflect.Descriptor instead.
func (*ChangePasswordReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{29}
}

func (x *ChangePasswordReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *ChangePasswordReq) GetCurrentPassword() string {
	if x != nil {
		return x.CurrentPassword
	}
	return ""
}

func (x *ChangePasswordReq) GetNewPassword() string {
	if x != nil {
		return x.NewPassword
	}
	return ""
}

type ChangePasswordResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ChangePasswordResp) Reset() {
	*x = ChangePasswordResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangePasswordResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangePasswordResp) ProtoMessage() {}

func (x *ChangePasswordResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangePasswordResp.ProtoReflect.Descriptor instead.
func (*ChangePasswordResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{30}
}

type FindUserAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
}

func (x *FindUserAccountReq) Reset() {
	*x = FindUserAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserAccountReq) ProtoMessage() {}

func (x *FindUserAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserAccountReq.ProtoReflect.Descriptor instead.
func (*FindUserAccountReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{31}
}

func (x *FindUserAccountReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type FindUserByAddressOrAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address"`
	Account string `protobuf:"bytes,2,opt,name=account,proto3" json:"account"`
}

func (x *FindUserByAddressOrAccountReq) Reset() {
	*x = FindUserByAddressOrAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserByAddressOrAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserByAddressOrAccountReq) ProtoMessage() {}

func (x *FindUserByAddressOrAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserByAddressOrAccountReq.ProtoReflect.Descriptor instead.
func (*FindUserByAddressOrAccountReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{32}
}

func (x *FindUserByAddressOrAccountReq) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *FindUserByAddressOrAccountReq) GetAccount() string {
	if x != nil {
		return x.Account
	}
	return ""
}

type FindUserAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserAccountMap map[string]string `protobuf:"bytes,1,rep,name=userAccountMap,proto3" json:"userAccountMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // userID  account
}

func (x *FindUserAccountResp) Reset() {
	*x = FindUserAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindUserAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindUserAccountResp) ProtoMessage() {}

func (x *FindUserAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindUserAccountResp.ProtoReflect.Descriptor instead.
func (*FindUserAccountResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{33}
}

func (x *FindUserAccountResp) GetUserAccountMap() map[string]string {
	if x != nil {
		return x.UserAccountMap
	}
	return nil
}

type FindAccountUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Accounts []string `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts"`
}

func (x *FindAccountUserReq) Reset() {
	*x = FindAccountUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAccountUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAccountUserReq) ProtoMessage() {}

func (x *FindAccountUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAccountUserReq.ProtoReflect.Descriptor instead.
func (*FindAccountUserReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{34}
}

func (x *FindAccountUserReq) GetAccounts() []string {
	if x != nil {
		return x.Accounts
	}
	return nil
}

type FindAccountUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountUserMap map[string]string `protobuf:"bytes,1,rep,name=accountUserMap,proto3" json:"accountUserMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // account  userID
}

func (x *FindAccountUserResp) Reset() {
	*x = FindAccountUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAccountUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAccountUserResp) ProtoMessage() {}

func (x *FindAccountUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAccountUserResp.ProtoReflect.Descriptor instead.
func (*FindAccountUserResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{35}
}

func (x *FindAccountUserResp) GetAccountUserMap() map[string]string {
	if x != nil {
		return x.AccountUserMap
	}
	return nil
}

type SignalRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileName        string                   `protobuf:"bytes,1,opt,name=fileName,proto3" json:"fileName"`
	MediaType       string                   `protobuf:"bytes,2,opt,name=mediaType,proto3" json:"mediaType"`
	RoomType        string                   `protobuf:"bytes,3,opt,name=roomType,proto3" json:"roomType"`
	SenderID        string                   `protobuf:"bytes,4,opt,name=senderID,proto3" json:"senderID"`
	SenderNickname  string                   `protobuf:"bytes,5,opt,name=senderNickname,proto3" json:"senderNickname"`
	RecvID          string                   `protobuf:"bytes,6,opt,name=recvID,proto3" json:"recvID"`
	RecvNickname    string                   `protobuf:"bytes,7,opt,name=recvNickname,proto3" json:"recvNickname"`
	GroupID         string                   `protobuf:"bytes,8,opt,name=groupID,proto3" json:"groupID"`
	GroupName       string                   `protobuf:"bytes,9,opt,name=groupName,proto3" json:"groupName"`
	InviterUserList []*common.UserPublicInfo `protobuf:"bytes,10,rep,name=inviterUserList,proto3" json:"inviterUserList"`
	Duration        int32                    `protobuf:"varint,11,opt,name=duration,proto3" json:"duration"`
	CreateTime      int64                    `protobuf:"varint,12,opt,name=createTime,proto3" json:"createTime"`
	Size            string                   `protobuf:"bytes,13,opt,name=size,proto3" json:"size"`
	DownloadURL     string                   `protobuf:"bytes,14,opt,name=downloadURL,proto3" json:"downloadURL"`
}

func (x *SignalRecord) Reset() {
	*x = SignalRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignalRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignalRecord) ProtoMessage() {}

func (x *SignalRecord) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignalRecord.ProtoReflect.Descriptor instead.
func (*SignalRecord) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{36}
}

func (x *SignalRecord) GetFileName() string {
	if x != nil {
		return x.FileName
	}
	return ""
}

func (x *SignalRecord) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *SignalRecord) GetRoomType() string {
	if x != nil {
		return x.RoomType
	}
	return ""
}

func (x *SignalRecord) GetSenderID() string {
	if x != nil {
		return x.SenderID
	}
	return ""
}

func (x *SignalRecord) GetSenderNickname() string {
	if x != nil {
		return x.SenderNickname
	}
	return ""
}

func (x *SignalRecord) GetRecvID() string {
	if x != nil {
		return x.RecvID
	}
	return ""
}

func (x *SignalRecord) GetRecvNickname() string {
	if x != nil {
		return x.RecvNickname
	}
	return ""
}

func (x *SignalRecord) GetGroupID() string {
	if x != nil {
		return x.GroupID
	}
	return ""
}

func (x *SignalRecord) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *SignalRecord) GetInviterUserList() []*common.UserPublicInfo {
	if x != nil {
		return x.InviterUserList
	}
	return nil
}

func (x *SignalRecord) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

func (x *SignalRecord) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *SignalRecord) GetSize() string {
	if x != nil {
		return x.Size
	}
	return ""
}

func (x *SignalRecord) GetDownloadURL() string {
	if x != nil {
		return x.DownloadURL
	}
	return ""
}

type OpenIMCallbackReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command"`
	Body    string `protobuf:"bytes,2,opt,name=body,proto3" json:"body"`
}

func (x *OpenIMCallbackReq) Reset() {
	*x = OpenIMCallbackReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenIMCallbackReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenIMCallbackReq) ProtoMessage() {}

func (x *OpenIMCallbackReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenIMCallbackReq.ProtoReflect.Descriptor instead.
func (*OpenIMCallbackReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{37}
}

func (x *OpenIMCallbackReq) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *OpenIMCallbackReq) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type OpenIMCallbackResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionCode       int32    `protobuf:"varint,1,opt,name=actionCode,proto3" json:"actionCode"`
	ErrCode          int32    `protobuf:"varint,2,opt,name=errCode,proto3" json:"errCode"`
	NextCode         int32    `protobuf:"varint,3,opt,name=nextCode,proto3" json:"nextCode"`
	ErrMsg           string   `protobuf:"bytes,4,opt,name=errMsg,proto3" json:"errMsg"`
	ErrDlt           string   `protobuf:"bytes,5,opt,name=errDlt,proto3" json:"errDlt"`
	SendID           string   `protobuf:"bytes,6,opt,name=sendID,proto3" json:"sendID"`
	CallbackCommand  string   `protobuf:"bytes,7,opt,name=callbackCommand,proto3" json:"callbackCommand"`
	ServerMsgID      string   `protobuf:"bytes,8,opt,name=serverMsgID,proto3" json:"serverMsgID"`
	ClientMsgID      string   `protobuf:"bytes,9,opt,name=clientMsgID,proto3" json:"clientMsgID"`
	SenderPlatformID int32    `protobuf:"varint,10,opt,name=senderPlatformID,proto3" json:"senderPlatformID"`
	SenderNickname   string   `protobuf:"bytes,11,opt,name=senderNickname,proto3" json:"senderNickname"`
	SessionType      int32    `protobuf:"varint,12,opt,name=sessionType,proto3" json:"sessionType"`
	MsgFrom          int32    `protobuf:"varint,13,opt,name=msgFrom,proto3" json:"msgFrom"`
	ContentType      int32    `protobuf:"varint,14,opt,name=contentType,proto3" json:"contentType"`
	Status           int32    `protobuf:"varint,15,opt,name=status,proto3" json:"status"`
	CreateTime       int64    `protobuf:"varint,16,opt,name=createTime,proto3" json:"createTime"`
	Content          string   `protobuf:"bytes,17,opt,name=content,proto3" json:"content"`
	Seq              int32    `protobuf:"varint,18,opt,name=seq,proto3" json:"seq"`
	AtUserList       []string `protobuf:"bytes,19,rep,name=atUserList,proto3" json:"atUserList"`
	FaceURL          string   `protobuf:"bytes,20,opt,name=faceURL,proto3" json:"faceURL"`
	Ex               string   `protobuf:"bytes,21,opt,name=ex,proto3" json:"ex"`
}

func (x *OpenIMCallbackResp) Reset() {
	*x = OpenIMCallbackResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenIMCallbackResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenIMCallbackResp) ProtoMessage() {}

func (x *OpenIMCallbackResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenIMCallbackResp.ProtoReflect.Descriptor instead.
func (*OpenIMCallbackResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{38}
}

func (x *OpenIMCallbackResp) GetActionCode() int32 {
	if x != nil {
		return x.ActionCode
	}
	return 0
}

func (x *OpenIMCallbackResp) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *OpenIMCallbackResp) GetNextCode() int32 {
	if x != nil {
		return x.NextCode
	}
	return 0
}

func (x *OpenIMCallbackResp) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

func (x *OpenIMCallbackResp) GetErrDlt() string {
	if x != nil {
		return x.ErrDlt
	}
	return ""
}

func (x *OpenIMCallbackResp) GetSendID() string {
	if x != nil {
		return x.SendID
	}
	return ""
}

func (x *OpenIMCallbackResp) GetCallbackCommand() string {
	if x != nil {
		return x.CallbackCommand
	}
	return ""
}

func (x *OpenIMCallbackResp) GetServerMsgID() string {
	if x != nil {
		return x.ServerMsgID
	}
	return ""
}

func (x *OpenIMCallbackResp) GetClientMsgID() string {
	if x != nil {
		return x.ClientMsgID
	}
	return ""
}

func (x *OpenIMCallbackResp) GetSenderPlatformID() int32 {
	if x != nil {
		return x.SenderPlatformID
	}
	return 0
}

func (x *OpenIMCallbackResp) GetSenderNickname() string {
	if x != nil {
		return x.SenderNickname
	}
	return ""
}

func (x *OpenIMCallbackResp) GetSessionType() int32 {
	if x != nil {
		return x.SessionType
	}
	return 0
}

func (x *OpenIMCallbackResp) GetMsgFrom() int32 {
	if x != nil {
		return x.MsgFrom
	}
	return 0
}

func (x *OpenIMCallbackResp) GetContentType() int32 {
	if x != nil {
		return x.ContentType
	}
	return 0
}

func (x *OpenIMCallbackResp) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *OpenIMCallbackResp) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *OpenIMCallbackResp) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *OpenIMCallbackResp) GetSeq() int32 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *OpenIMCallbackResp) GetAtUserList() []string {
	if x != nil {
		return x.AtUserList
	}
	return nil
}

func (x *OpenIMCallbackResp) GetFaceURL() string {
	if x != nil {
		return x.FaceURL
	}
	return ""
}

func (x *OpenIMCallbackResp) GetEx() string {
	if x != nil {
		return x.Ex
	}
	return ""
}

type SearchUserFullInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    string                    `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword"`
	Pagination *sdkwss.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	Genders    int32                     `protobuf:"varint,3,opt,name=genders,proto3" json:"genders"`
	Normal     int32                     `protobuf:"varint,4,opt,name=normal,proto3" json:"normal"`
}

func (x *SearchUserFullInfoReq) Reset() {
	*x = SearchUserFullInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserFullInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserFullInfoReq) ProtoMessage() {}

func (x *SearchUserFullInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserFullInfoReq.ProtoReflect.Descriptor instead.
func (*SearchUserFullInfoReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{39}
}

func (x *SearchUserFullInfoReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchUserFullInfoReq) GetPagination() *sdkwss.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *SearchUserFullInfoReq) GetGenders() int32 {
	if x != nil {
		return x.Genders
	}
	return 0
}

func (x *SearchUserFullInfoReq) GetNormal() int32 {
	if x != nil {
		return x.Normal
	}
	return 0
}

type SearchUserFullInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32                 `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Users []*common.UserFullInfo `protobuf:"bytes,2,rep,name=users,proto3" json:"users"`
}

func (x *SearchUserFullInfoResp) Reset() {
	*x = SearchUserFullInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserFullInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserFullInfoResp) ProtoMessage() {}

func (x *SearchUserFullInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserFullInfoResp.ProtoReflect.Descriptor instead.
func (*SearchUserFullInfoResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{40}
}

func (x *SearchUserFullInfoResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchUserFullInfoResp) GetUsers() []*common.UserFullInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

type UserLoginCountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start int64 `protobuf:"varint,1,opt,name=start,proto3" json:"start"`
	End   int64 `protobuf:"varint,2,opt,name=end,proto3" json:"end"`
}

func (x *UserLoginCountReq) Reset() {
	*x = UserLoginCountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginCountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginCountReq) ProtoMessage() {}

func (x *UserLoginCountReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginCountReq.ProtoReflect.Descriptor instead.
func (*UserLoginCountReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{41}
}

func (x *UserLoginCountReq) GetStart() int64 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *UserLoginCountReq) GetEnd() int64 {
	if x != nil {
		return x.End
	}
	return 0
}

type UserLoginCountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LoginCount   int64            `protobuf:"varint,1,opt,name=loginCount,proto3" json:"loginCount"`
	UnloginCount int64            `protobuf:"varint,2,opt,name=unloginCount,proto3" json:"unloginCount"`
	Count        map[string]int64 `protobuf:"bytes,3,rep,name=count,proto3" json:"count,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *UserLoginCountResp) Reset() {
	*x = UserLoginCountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLoginCountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLoginCountResp) ProtoMessage() {}

func (x *UserLoginCountResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLoginCountResp.ProtoReflect.Descriptor instead.
func (*UserLoginCountResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{42}
}

func (x *UserLoginCountResp) GetLoginCount() int64 {
	if x != nil {
		return x.LoginCount
	}
	return 0
}

func (x *UserLoginCountResp) GetUnloginCount() int64 {
	if x != nil {
		return x.UnloginCount
	}
	return 0
}

func (x *UserLoginCountResp) GetCount() map[string]int64 {
	if x != nil {
		return x.Count
	}
	return nil
}

type LoginResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChatToken string `protobuf:"bytes,2,opt,name=chatToken,proto3" json:"chatToken"`
	UserID    string `protobuf:"bytes,3,opt,name=userID,proto3" json:"userID"`
}

func (x *LoginResp) Reset() {
	*x = LoginResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResp) ProtoMessage() {}

func (x *LoginResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResp.ProtoReflect.Descriptor instead.
func (*LoginResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{43}
}

func (x *LoginResp) GetChatToken() string {
	if x != nil {
		return x.ChatToken
	}
	return ""
}

func (x *LoginResp) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

type SearchUserInfoReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keyword    string                    `protobuf:"bytes,1,opt,name=keyword,proto3" json:"keyword"`
	Pagination *sdkwss.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
	Genders    []int32                   `protobuf:"varint,3,rep,packed,name=genders,proto3" json:"genders"`
	UserIDs    []string                  `protobuf:"bytes,4,rep,name=userIDs,proto3" json:"userIDs"`
}

func (x *SearchUserInfoReq) Reset() {
	*x = SearchUserInfoReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserInfoReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserInfoReq) ProtoMessage() {}

func (x *SearchUserInfoReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserInfoReq.ProtoReflect.Descriptor instead.
func (*SearchUserInfoReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{44}
}

func (x *SearchUserInfoReq) GetKeyword() string {
	if x != nil {
		return x.Keyword
	}
	return ""
}

func (x *SearchUserInfoReq) GetPagination() *sdkwss.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *SearchUserInfoReq) GetGenders() []int32 {
	if x != nil {
		return x.Genders
	}
	return nil
}

func (x *SearchUserInfoReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type SearchUserInfoResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total uint32                 `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Users []*common.UserFullInfo `protobuf:"bytes,2,rep,name=users,proto3" json:"users"`
}

func (x *SearchUserInfoResp) Reset() {
	*x = SearchUserInfoResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserInfoResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserInfoResp) ProtoMessage() {}

func (x *SearchUserInfoResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserInfoResp.ProtoReflect.Descriptor instead.
func (*SearchUserInfoResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{45}
}

func (x *SearchUserInfoResp) GetTotal() uint32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *SearchUserInfoResp) GetUsers() []*common.UserFullInfo {
	if x != nil {
		return x.Users
	}
	return nil
}

type GetTokenForVideoMeetingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Room     string `protobuf:"bytes,1,opt,name=room,proto3" json:"room"`
	Identity string `protobuf:"bytes,2,opt,name=identity,proto3" json:"identity"`
}

func (x *GetTokenForVideoMeetingReq) Reset() {
	*x = GetTokenForVideoMeetingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenForVideoMeetingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenForVideoMeetingReq) ProtoMessage() {}

func (x *GetTokenForVideoMeetingReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenForVideoMeetingReq.ProtoReflect.Descriptor instead.
func (*GetTokenForVideoMeetingReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{46}
}

func (x *GetTokenForVideoMeetingReq) GetRoom() string {
	if x != nil {
		return x.Room
	}
	return ""
}

func (x *GetTokenForVideoMeetingReq) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

type GetTokenForVideoMeetingResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerUrl string `protobuf:"bytes,1,opt,name=serverUrl,proto3" json:"serverUrl"`
	Token     string `protobuf:"bytes,2,opt,name=token,proto3" json:"token"`
}

func (x *GetTokenForVideoMeetingResp) Reset() {
	*x = GetTokenForVideoMeetingResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTokenForVideoMeetingResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTokenForVideoMeetingResp) ProtoMessage() {}

func (x *GetTokenForVideoMeetingResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTokenForVideoMeetingResp.ProtoReflect.Descriptor instead.
func (*GetTokenForVideoMeetingResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{47}
}

func (x *GetTokenForVideoMeetingResp) GetServerUrl() string {
	if x != nil {
		return x.ServerUrl
	}
	return ""
}

func (x *GetTokenForVideoMeetingResp) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

type CheckUserExistReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *RegisterUserInfo `protobuf:"bytes,1,opt,name=user,proto3" json:"user"`
}

func (x *CheckUserExistReq) Reset() {
	*x = CheckUserExistReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserExistReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserExistReq) ProtoMessage() {}

func (x *CheckUserExistReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserExistReq.ProtoReflect.Descriptor instead.
func (*CheckUserExistReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{48}
}

func (x *CheckUserExistReq) GetUser() *RegisterUserInfo {
	if x != nil {
		return x.User
	}
	return nil
}

type CheckUserExistResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Userid       string `protobuf:"bytes,1,opt,name=userid,proto3" json:"userid"`
	IsRegistered bool   `protobuf:"varint,2,opt,name=isRegistered,proto3" json:"isRegistered"`
}

func (x *CheckUserExistResp) Reset() {
	*x = CheckUserExistResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserExistResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserExistResp) ProtoMessage() {}

func (x *CheckUserExistResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserExistResp.ProtoReflect.Descriptor instead.
func (*CheckUserExistResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{49}
}

func (x *CheckUserExistResp) GetUserid() string {
	if x != nil {
		return x.Userid
	}
	return ""
}

func (x *CheckUserExistResp) GetIsRegistered() bool {
	if x != nil {
		return x.IsRegistered
	}
	return false
}

type DelUserAccountReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserIDs []string `protobuf:"bytes,1,rep,name=userIDs,proto3" json:"userIDs"`
}

func (x *DelUserAccountReq) Reset() {
	*x = DelUserAccountReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUserAccountReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserAccountReq) ProtoMessage() {}

func (x *DelUserAccountReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserAccountReq.ProtoReflect.Descriptor instead.
func (*DelUserAccountReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{50}
}

func (x *DelUserAccountReq) GetUserIDs() []string {
	if x != nil {
		return x.UserIDs
	}
	return nil
}

type DelUserAccountResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DelUserAccountResp) Reset() {
	*x = DelUserAccountResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelUserAccountResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelUserAccountResp) ProtoMessage() {}

func (x *DelUserAccountResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelUserAccountResp.ProtoReflect.Descriptor instead.
func (*DelUserAccountResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{51}
}

type GetGroupFromContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetGroupFromContactReq) Reset() {
	*x = GetGroupFromContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupFromContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupFromContactReq) ProtoMessage() {}

func (x *GetGroupFromContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupFromContactReq.ProtoReflect.Descriptor instead.
func (*GetGroupFromContactReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{52}
}

type GetGroupFromContactResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupIDs []string `protobuf:"bytes,1,rep,name=groupIDs,proto3" json:"groupIDs"`
}

func (x *GetGroupFromContactResp) Reset() {
	*x = GetGroupFromContactResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetGroupFromContactResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetGroupFromContactResp) ProtoMessage() {}

func (x *GetGroupFromContactResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetGroupFromContactResp.ProtoReflect.Descriptor instead.
func (*GetGroupFromContactResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{53}
}

func (x *GetGroupFromContactResp) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type SaveGroupToContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupIDs []string `protobuf:"bytes,1,rep,name=groupIDs,proto3" json:"groupIDs"`
}

func (x *SaveGroupToContactReq) Reset() {
	*x = SaveGroupToContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveGroupToContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveGroupToContactReq) ProtoMessage() {}

func (x *SaveGroupToContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveGroupToContactReq.ProtoReflect.Descriptor instead.
func (*SaveGroupToContactReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{54}
}

func (x *SaveGroupToContactReq) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type SaveGroupToContactResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SaveGroupToContactResp) Reset() {
	*x = SaveGroupToContactResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveGroupToContactResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveGroupToContactResp) ProtoMessage() {}

func (x *SaveGroupToContactResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveGroupToContactResp.ProtoReflect.Descriptor instead.
func (*SaveGroupToContactResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{55}
}

type DeleteGroupFromContactReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupIDs []string `protobuf:"bytes,1,rep,name=groupIDs,proto3" json:"groupIDs"`
}

func (x *DeleteGroupFromContactReq) Reset() {
	*x = DeleteGroupFromContactReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupFromContactReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupFromContactReq) ProtoMessage() {}

func (x *DeleteGroupFromContactReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupFromContactReq.ProtoReflect.Descriptor instead.
func (*DeleteGroupFromContactReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{56}
}

func (x *DeleteGroupFromContactReq) GetGroupIDs() []string {
	if x != nil {
		return x.GroupIDs
	}
	return nil
}

type DeleteGroupFromContactResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteGroupFromContactResp) Reset() {
	*x = DeleteGroupFromContactResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupFromContactResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupFromContactResp) ProtoMessage() {}

func (x *DeleteGroupFromContactResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupFromContactResp.ProtoReflect.Descriptor instead.
func (*DeleteGroupFromContactResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{57}
}

type DeleteGroupApplicationFromRecipientReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteGroupApplicationFromRecipientReq) Reset() {
	*x = DeleteGroupApplicationFromRecipientReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupApplicationFromRecipientReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupApplicationFromRecipientReq) ProtoMessage() {}

func (x *DeleteGroupApplicationFromRecipientReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupApplicationFromRecipientReq.ProtoReflect.Descriptor instead.
func (*DeleteGroupApplicationFromRecipientReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{58}
}

type DeleteGroupApplicationFromRecipientResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteGroupApplicationFromRecipientResp) Reset() {
	*x = DeleteGroupApplicationFromRecipientResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupApplicationFromRecipientResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupApplicationFromRecipientResp) ProtoMessage() {}

func (x *DeleteGroupApplicationFromRecipientResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupApplicationFromRecipientResp.ProtoReflect.Descriptor instead.
func (*DeleteGroupApplicationFromRecipientResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{59}
}

type DeleteGroupApplicationFromApplicantReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteGroupApplicationFromApplicantReq) Reset() {
	*x = DeleteGroupApplicationFromApplicantReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupApplicationFromApplicantReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupApplicationFromApplicantReq) ProtoMessage() {}

func (x *DeleteGroupApplicationFromApplicantReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupApplicationFromApplicantReq.ProtoReflect.Descriptor instead.
func (*DeleteGroupApplicationFromApplicantReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{60}
}

type DeleteGroupApplicationFromApplicantResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteGroupApplicationFromApplicantResp) Reset() {
	*x = DeleteGroupApplicationFromApplicantResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupApplicationFromApplicantResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupApplicationFromApplicantResp) ProtoMessage() {}

func (x *DeleteGroupApplicationFromApplicantResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupApplicationFromApplicantResp.ProtoReflect.Descriptor instead.
func (*DeleteGroupApplicationFromApplicantResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{61}
}

type DeleteGroupApplicationFromAlltReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteGroupApplicationFromAlltReq) Reset() {
	*x = DeleteGroupApplicationFromAlltReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupApplicationFromAlltReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupApplicationFromAlltReq) ProtoMessage() {}

func (x *DeleteGroupApplicationFromAlltReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupApplicationFromAlltReq.ProtoReflect.Descriptor instead.
func (*DeleteGroupApplicationFromAlltReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{62}
}

type DeleteGroupApplicationFromAllResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteGroupApplicationFromAllResp) Reset() {
	*x = DeleteGroupApplicationFromAllResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteGroupApplicationFromAllResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteGroupApplicationFromAllResp) ProtoMessage() {}

func (x *DeleteGroupApplicationFromAllResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteGroupApplicationFromAllResp.ProtoReflect.Descriptor instead.
func (*DeleteGroupApplicationFromAllResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{63}
}

type Post struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostID         string                   `protobuf:"bytes,1,opt,name=postID,proto3" json:"postID"`
	UserID         string                   `protobuf:"bytes,2,opt,name=userID,proto3" json:"userID"`
	Content        string                   `protobuf:"bytes,3,opt,name=content,proto3" json:"content"`
	CommentCount   int64                    `protobuf:"varint,4,opt,name=commentCount,proto3" json:"commentCount"`
	ForwardCount   int64                    `protobuf:"varint,5,opt,name=forwardCount,proto3" json:"forwardCount"`
	LikeCount      int64                    `protobuf:"varint,6,opt,name=likeCount,proto3" json:"likeCount"`
	AllowComment   int32                    `protobuf:"varint,7,opt,name=allowComment,proto3" json:"allowComment"`
	AllowForward   int32                    `protobuf:"varint,8,opt,name=allowForward,proto3" json:"allowForward"`
	IsLiked        int32                    `protobuf:"varint,9,opt,name=isLiked,proto3" json:"isLiked"`
	IsCollected    int32                    `protobuf:"varint,10,opt,name=isCollected,proto3" json:"isCollected"`
	CreateTime     int64                    `protobuf:"varint,11,opt,name=createTime,proto3" json:"createTime"`
	UpdateTime     int64                    `protobuf:"varint,12,opt,name=updateTime,proto3" json:"updateTime"`
	AtUserIds      []string                 `protobuf:"bytes,13,rep,name=atUserIds,proto3" json:"atUserIds"`
	UserInfo       *common.UserPublicInfo   `protobuf:"bytes,14,opt,name=userInfo,proto3" json:"userInfo"`
	MediaMsgs      []*common.PostMedia      `protobuf:"bytes,15,rep,name=mediaMsgs,proto3" json:"mediaMsgs"`
	AtUserInfoList []*common.UserPublicInfo `protobuf:"bytes,16,rep,name=atUserInfoList,proto3" json:"atUserInfoList"`
	ForwardPostID  string                   `protobuf:"bytes,17,opt,name=forwardPostID,proto3" json:"forwardPostID"`
}

func (x *Post) Reset() {
	*x = Post{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Post) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Post) ProtoMessage() {}

func (x *Post) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Post.ProtoReflect.Descriptor instead.
func (*Post) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{64}
}

func (x *Post) GetPostID() string {
	if x != nil {
		return x.PostID
	}
	return ""
}

func (x *Post) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *Post) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Post) GetCommentCount() int64 {
	if x != nil {
		return x.CommentCount
	}
	return 0
}

func (x *Post) GetForwardCount() int64 {
	if x != nil {
		return x.ForwardCount
	}
	return 0
}

func (x *Post) GetLikeCount() int64 {
	if x != nil {
		return x.LikeCount
	}
	return 0
}

func (x *Post) GetAllowComment() int32 {
	if x != nil {
		return x.AllowComment
	}
	return 0
}

func (x *Post) GetAllowForward() int32 {
	if x != nil {
		return x.AllowForward
	}
	return 0
}

func (x *Post) GetIsLiked() int32 {
	if x != nil {
		return x.IsLiked
	}
	return 0
}

func (x *Post) GetIsCollected() int32 {
	if x != nil {
		return x.IsCollected
	}
	return 0
}

func (x *Post) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *Post) GetUpdateTime() int64 {
	if x != nil {
		return x.UpdateTime
	}
	return 0
}

func (x *Post) GetAtUserIds() []string {
	if x != nil {
		return x.AtUserIds
	}
	return nil
}

func (x *Post) GetUserInfo() *common.UserPublicInfo {
	if x != nil {
		return x.UserInfo
	}
	return nil
}

func (x *Post) GetMediaMsgs() []*common.PostMedia {
	if x != nil {
		return x.MediaMsgs
	}
	return nil
}

func (x *Post) GetAtUserInfoList() []*common.UserPublicInfo {
	if x != nil {
		return x.AtUserInfoList
	}
	return nil
}

func (x *Post) GetForwardPostID() string {
	if x != nil {
		return x.ForwardPostID
	}
	return ""
}

type PublishPostReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Content       *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=content,proto3" json:"content"`
	AllowComment  int32                   `protobuf:"varint,2,opt,name=allowComment,proto3" json:"allowComment"`
	AllowForward  int32                   `protobuf:"varint,3,opt,name=allowForward,proto3" json:"allowForward"`
	ForwardPostID string                  `protobuf:"bytes,4,opt,name=forwardPostID,proto3" json:"forwardPostID"`
	AtUserIds     []string                `protobuf:"bytes,5,rep,name=atUserIds,proto3" json:"atUserIds"`
	MediaMsgs     []*common.PostMedia     `protobuf:"bytes,6,rep,name=mediaMsgs,proto3" json:"mediaMsgs"`
}

func (x *PublishPostReq) Reset() {
	*x = PublishPostReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishPostReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishPostReq) ProtoMessage() {}

func (x *PublishPostReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishPostReq.ProtoReflect.Descriptor instead.
func (*PublishPostReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{65}
}

func (x *PublishPostReq) GetContent() *wrapperspb.StringValue {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *PublishPostReq) GetAllowComment() int32 {
	if x != nil {
		return x.AllowComment
	}
	return 0
}

func (x *PublishPostReq) GetAllowForward() int32 {
	if x != nil {
		return x.AllowForward
	}
	return 0
}

func (x *PublishPostReq) GetForwardPostID() string {
	if x != nil {
		return x.ForwardPostID
	}
	return ""
}

func (x *PublishPostReq) GetAtUserIds() []string {
	if x != nil {
		return x.AtUserIds
	}
	return nil
}

func (x *PublishPostReq) GetMediaMsgs() []*common.PostMedia {
	if x != nil {
		return x.MediaMsgs
	}
	return nil
}

type PublishPostResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PublishPostResp) Reset() {
	*x = PublishPostResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublishPostResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishPostResp) ProtoMessage() {}

func (x *PublishPostResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishPostResp.ProtoReflect.Descriptor instead.
func (*PublishPostResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{66}
}

type GetPostPaginationReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pagination *sdkwss.RequestPagination `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination"`
	Type       int32                     `protobuf:"varint,2,opt,name=type,proto3" json:"type"`
}

func (x *GetPostPaginationReq) Reset() {
	*x = GetPostPaginationReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostPaginationReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostPaginationReq) ProtoMessage() {}

func (x *GetPostPaginationReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostPaginationReq.ProtoReflect.Descriptor instead.
func (*GetPostPaginationReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{67}
}

func (x *GetPostPaginationReq) GetPagination() *sdkwss.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

func (x *GetPostPaginationReq) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

type GetPostPaginationResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64   `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Posts []*Post `protobuf:"bytes,2,rep,name=posts,proto3" json:"posts"`
}

func (x *GetPostPaginationResp) Reset() {
	*x = GetPostPaginationResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostPaginationResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostPaginationResp) ProtoMessage() {}

func (x *GetPostPaginationResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostPaginationResp.ProtoReflect.Descriptor instead.
func (*GetPostPaginationResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{68}
}

func (x *GetPostPaginationResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetPostPaginationResp) GetPosts() []*Post {
	if x != nil {
		return x.Posts
	}
	return nil
}

type GetPostByIDReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostID string `protobuf:"bytes,1,opt,name=postID,proto3" json:"postID"`
}

func (x *GetPostByIDReq) Reset() {
	*x = GetPostByIDReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostByIDReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostByIDReq) ProtoMessage() {}

func (x *GetPostByIDReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostByIDReq.ProtoReflect.Descriptor instead.
func (*GetPostByIDReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{69}
}

func (x *GetPostByIDReq) GetPostID() string {
	if x != nil {
		return x.PostID
	}
	return ""
}

type GetPostByIDResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Post *Post `protobuf:"bytes,1,opt,name=post,proto3" json:"post"`
}

func (x *GetPostByIDResp) Reset() {
	*x = GetPostByIDResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostByIDResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostByIDResp) ProtoMessage() {}

func (x *GetPostByIDResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostByIDResp.ProtoReflect.Descriptor instead.
func (*GetPostByIDResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{70}
}

func (x *GetPostByIDResp) GetPost() *Post {
	if x != nil {
		return x.Post
	}
	return nil
}

type GetPostPaginationByUserReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserID     string                    `protobuf:"bytes,1,opt,name=userID,proto3" json:"userID"`
	Pagination *sdkwss.RequestPagination `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (x *GetPostPaginationByUserReq) Reset() {
	*x = GetPostPaginationByUserReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostPaginationByUserReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostPaginationByUserReq) ProtoMessage() {}

func (x *GetPostPaginationByUserReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostPaginationByUserReq.ProtoReflect.Descriptor instead.
func (*GetPostPaginationByUserReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{71}
}

func (x *GetPostPaginationByUserReq) GetUserID() string {
	if x != nil {
		return x.UserID
	}
	return ""
}

func (x *GetPostPaginationByUserReq) GetPagination() *sdkwss.RequestPagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type GetPostPaginationByUserResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Total int64   `protobuf:"varint,1,opt,name=total,proto3" json:"total"`
	Posts []*Post `protobuf:"bytes,2,rep,name=posts,proto3" json:"posts"`
}

func (x *GetPostPaginationByUserResp) Reset() {
	*x = GetPostPaginationByUserResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetPostPaginationByUserResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetPostPaginationByUserResp) ProtoMessage() {}

func (x *GetPostPaginationByUserResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetPostPaginationByUserResp.ProtoReflect.Descriptor instead.
func (*GetPostPaginationByUserResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{72}
}

func (x *GetPostPaginationByUserResp) GetTotal() int64 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *GetPostPaginationByUserResp) GetPosts() []*Post {
	if x != nil {
		return x.Posts
	}
	return nil
}

type DeletePostReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostID string `protobuf:"bytes,1,opt,name=postID,proto3" json:"postID"`
}

func (x *DeletePostReq) Reset() {
	*x = DeletePostReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePostReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePostReq) ProtoMessage() {}

func (x *DeletePostReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePostReq.ProtoReflect.Descriptor instead.
func (*DeletePostReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{73}
}

func (x *DeletePostReq) GetPostID() string {
	if x != nil {
		return x.PostID
	}
	return ""
}

type DeletePostResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeletePostResp) Reset() {
	*x = DeletePostResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePostResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePostResp) ProtoMessage() {}

func (x *DeletePostResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePostResp.ProtoReflect.Descriptor instead.
func (*DeletePostResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{74}
}

type ChangeAllowCommentPostReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostID string `protobuf:"bytes,1,opt,name=postID,proto3" json:"postID"`
}

func (x *ChangeAllowCommentPostReq) Reset() {
	*x = ChangeAllowCommentPostReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAllowCommentPostReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAllowCommentPostReq) ProtoMessage() {}

func (x *ChangeAllowCommentPostReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAllowCommentPostReq.ProtoReflect.Descriptor instead.
func (*ChangeAllowCommentPostReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{75}
}

func (x *ChangeAllowCommentPostReq) GetPostID() string {
	if x != nil {
		return x.PostID
	}
	return ""
}

type ChangeAllowCommentPostResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostID       string `protobuf:"bytes,1,opt,name=postID,proto3" json:"postID"`
	AllowComment int32  `protobuf:"varint,2,opt,name=allowComment,proto3" json:"allowComment"`
}

func (x *ChangeAllowCommentPostResp) Reset() {
	*x = ChangeAllowCommentPostResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAllowCommentPostResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAllowCommentPostResp) ProtoMessage() {}

func (x *ChangeAllowCommentPostResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAllowCommentPostResp.ProtoReflect.Descriptor instead.
func (*ChangeAllowCommentPostResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{76}
}

func (x *ChangeAllowCommentPostResp) GetPostID() string {
	if x != nil {
		return x.PostID
	}
	return ""
}

func (x *ChangeAllowCommentPostResp) GetAllowComment() int32 {
	if x != nil {
		return x.AllowComment
	}
	return 0
}

type ChangeAllowForwardPostReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostID string `protobuf:"bytes,1,opt,name=postID,proto3" json:"postID"`
}

func (x *ChangeAllowForwardPostReq) Reset() {
	*x = ChangeAllowForwardPostReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAllowForwardPostReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAllowForwardPostReq) ProtoMessage() {}

func (x *ChangeAllowForwardPostReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAllowForwardPostReq.ProtoReflect.Descriptor instead.
func (*ChangeAllowForwardPostReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{77}
}

func (x *ChangeAllowForwardPostReq) GetPostID() string {
	if x != nil {
		return x.PostID
	}
	return ""
}

type ChangeAllowForwardPostResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostID       string `protobuf:"bytes,1,opt,name=postID,proto3" json:"postID"`
	AllowForward int32  `protobuf:"varint,2,opt,name=allowForward,proto3" json:"allowForward"`
}

func (x *ChangeAllowForwardPostResp) Reset() {
	*x = ChangeAllowForwardPostResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeAllowForwardPostResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeAllowForwardPostResp) ProtoMessage() {}

func (x *ChangeAllowForwardPostResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeAllowForwardPostResp.ProtoReflect.Descriptor instead.
func (*ChangeAllowForwardPostResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{78}
}

func (x *ChangeAllowForwardPostResp) GetPostID() string {
	if x != nil {
		return x.PostID
	}
	return ""
}

func (x *ChangeAllowForwardPostResp) GetAllowForward() int32 {
	if x != nil {
		return x.AllowForward
	}
	return 0
}

type LikePostReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostID string `protobuf:"bytes,1,opt,name=postID,proto3" json:"postID"`
}

func (x *LikePostReq) Reset() {
	*x = LikePostReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikePostReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikePostReq) ProtoMessage() {}

func (x *LikePostReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikePostReq.ProtoReflect.Descriptor instead.
func (*LikePostReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{79}
}

func (x *LikePostReq) GetPostID() string {
	if x != nil {
		return x.PostID
	}
	return ""
}

type LikePostResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLiked int32 `protobuf:"varint,1,opt,name=isLiked,proto3" json:"isLiked"`
}

func (x *LikePostResp) Reset() {
	*x = LikePostResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LikePostResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LikePostResp) ProtoMessage() {}

func (x *LikePostResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LikePostResp.ProtoReflect.Descriptor instead.
func (*LikePostResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{80}
}

func (x *LikePostResp) GetIsLiked() int32 {
	if x != nil {
		return x.IsLiked
	}
	return 0
}

type CollectPostReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PostID string `protobuf:"bytes,1,opt,name=postID,proto3" json:"postID"`
}

func (x *CollectPostReq) Reset() {
	*x = CollectPostReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectPostReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectPostReq) ProtoMessage() {}

func (x *CollectPostReq) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectPostReq.ProtoReflect.Descriptor instead.
func (*CollectPostReq) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{81}
}

func (x *CollectPostReq) GetPostID() string {
	if x != nil {
		return x.PostID
	}
	return ""
}

type CollectPostResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCollected int32 `protobuf:"varint,1,opt,name=isCollected,proto3" json:"isCollected"`
}

func (x *CollectPostResp) Reset() {
	*x = CollectPostResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_chat_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollectPostResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollectPostResp) ProtoMessage() {}

func (x *CollectPostResp) ProtoReflect() protoreflect.Message {
	mi := &file_chat_chat_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollectPostResp.ProtoReflect.Descriptor instead.
func (*CollectPostResp) Descriptor() ([]byte, []int) {
	return file_chat_chat_proto_rawDescGZIP(), []int{82}
}

func (x *CollectPostResp) GetIsCollected() int32 {
	if x != nil {
		return x.IsCollected
	}
	return 0
}

var File_chat_chat_proto protoreflect.FileDescriptor

var file_chat_chat_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x1a, 0x13,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x73, 0x2f, 0x73, 0x64, 0x6b, 0x77,
	0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x70, 0x62, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x70, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x42, 0x0a, 0x0a, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x2b, 0x0a, 0x0f, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x47, 0x0a, 0x10, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x33, 0x0a, 0x08, 0x74, 0x69,
	0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x6f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22,
	0x7a, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x92, 0x05, 0x0a, 0x11,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x36, 0x0a, 0x07, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x38, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x66,
	0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65,
	0x55, 0x52, 0x4c, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x12, 0x32, 0x0a,
	0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x62, 0x6f, 0x75,
	0x74, 0x12, 0x43, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x64, 0x64, 0x46, 0x72, 0x69,
	0x65, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x41, 0x64, 0x64,
	0x46, 0x72, 0x69, 0x65, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x42,
	0x65, 0x65, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x42, 0x65, 0x65,
	0x70, 0x12, 0x43, 0x0a, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x56, 0x69, 0x62, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x56, 0x69, 0x62,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x10, 0x67, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x52, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x67,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x76, 0x4d, 0x73, 0x67, 0x4f, 0x70, 0x74, 0x12,
	0x3f, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x22, 0xf0, 0x01, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x66, 0x61,
	0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x38, 0x0a, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x52,
	0x4c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x55, 0x52, 0x4c, 0x12,
	0x32, 0x0a, 0x05, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x61, 0x62,
	0x6f, 0x75, 0x74, 0x22, 0x31, 0x0a, 0x15, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x50, 0x0a, 0x1b, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x4f, 0x66, 0x4f, 0x6e, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x4d, 0x0a, 0x16, 0x46, 0x69, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x33, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x8f, 0x01, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x40, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73,
	0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x22, 0x65, 0x0a, 0x18, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x33, 0x0a, 0x05, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73,
	0x22, 0x2f, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x73, 0x22, 0x49, 0x0a, 0x14, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x46, 0x75, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x31, 0x0a, 0x05, 0x75, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x75, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x12, 0x0a, 0x10,
	0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52, 0x65, 0x71,
	0x22, 0x2d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22,
	0xf1, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x75, 0x73, 0x65, 0x64, 0x46, 0x6f, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x26, 0x0a, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12,
	0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66,
	0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x83, 0x01, 0x0a, 0x0d, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x76,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x22,
	0x10, 0x0a, 0x0e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x31, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x22, 0x2a, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x22, 0xd6, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63,
	0x65, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65,
	0x55, 0x52, 0x4c, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x22, 0xde, 0x01, 0x0a, 0x0f, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x14, 0x0a,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x75, 0x74,
	0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x75,
	0x74, 0x6f, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x48, 0x0a, 0x10, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x74, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x68, 0x61, 0x74, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x8e, 0x01, 0x0a, 0x11, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x31, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x14, 0x0a, 0x12, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0xbe, 0x01, 0x0a, 0x08,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x1a,
	0x0a, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0xa2, 0x01, 0x0a,
	0x10, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65,
	0x71, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x72, 0x65, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x22, 0x13, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x77, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a,
	0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x14, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x22, 0x2e, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x53, 0x0a, 0x1d, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xb6, 0x01, 0x0a, 0x13, 0x46,
	0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x5c, 0x0a, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0e, 0x75, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x70,
	0x1a, 0x41, 0x0a, 0x13, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0x30, 0x0a, 0x12, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x13, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5c, 0x0a,
	0x0e, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x1a, 0x41, 0x0a, 0x13, 0x41,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd7,
	0x03, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6d,
	0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x49,
	0x44, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x63,
	0x76, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x63, 0x76, 0x49,
	0x44, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63, 0x76, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65, 0x63, 0x76, 0x4e, 0x69, 0x63,
	0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x12,
	0x1c, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x47, 0x0a,
	0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0f, 0x69, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x6f, 0x77, 0x6e, 0x6c, 0x6f,
	0x61, 0x64, 0x55, 0x52, 0x4c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x6f, 0x77,
	0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x52, 0x4c, 0x22, 0x41, 0x0a, 0x11, 0x4f, 0x70, 0x65, 0x6e,
	0x49, 0x4d, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x80, 0x05, 0x0a, 0x12,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x6e, 0x65, 0x78, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d,
	0x73, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67,
	0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x44, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x65, 0x72, 0x72, 0x44, 0x6c, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x6e, 0x64,
	0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x6e, 0x64, 0x49, 0x44,
	0x12, 0x28, 0x0a, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x61, 0x6c, 0x6c, 0x62,
	0x61, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x12, 0x2a,
	0x0a, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d,
	0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72,
	0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x73, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x20,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x65, 0x71, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x73, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x13, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x66, 0x61, 0x63, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x0e,
	0x0a, 0x02, 0x65, 0x78, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x65, 0x78, 0x22, 0xa5,
	0x01, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x46, 0x75, 0x6c,
	0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x73, 0x64, 0x6b, 0x77, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x22, 0x61, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x31, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x3b, 0x0a, 0x11, 0x55, 0x73, 0x65,
	0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x14,
	0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x65, 0x6e, 0x64, 0x22, 0xd4, 0x01, 0x0a, 0x12, 0x55, 0x73, 0x65, 0x72, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1e, 0x0a,
	0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0c, 0x75, 0x6e, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x40, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x38, 0x0a, 0x0a, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x41, 0x0a,
	0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44,
	0x22, 0xa3, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64,
	0x6b, 0x77, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x07, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22, 0x5d, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x12, 0x31, 0x0a, 0x05, 0x75, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x05,
	0x75, 0x73, 0x65, 0x72, 0x73, 0x22, 0x4c, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x22, 0x51, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46,
	0x6f, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x55, 0x72, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x46, 0x0a, 0x11, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x31, 0x0a, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x22, 0x50,
	0x0a, 0x12, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c,
	0x69, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x22, 0x2d, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x71, 0x12, 0x18, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x22,
	0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x18, 0x0a, 0x16, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x22,
	0x35, 0x0a, 0x17, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x22, 0x33, 0x0a, 0x15, 0x73, 0x61, 0x76, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x22, 0x18, 0x0a, 0x16, 0x73,
	0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x37, 0x0a, 0x19, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52,
	0x65, 0x71, 0x12, 0x1a, 0x0a, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x44, 0x73, 0x22, 0x1c,
	0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x72, 0x6f,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x28, 0x0a, 0x26,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x22, 0x29, 0x0a, 0x27, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x22, 0x28, 0x0a, 0x26, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x22, 0x29, 0x0a, 0x27, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x23, 0x0a, 0x21, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6c, 0x6c, 0x74, 0x52, 0x65, 0x71, 0x22, 0x23, 0x0a, 0x21, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x22, 0xf8, 0x04, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09,
	0x6c, 0x69, 0x6b, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4d,
	0x73, 0x67, 0x73, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65,
	0x64, 0x69, 0x61, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x73, 0x67, 0x73, 0x12, 0x45,
	0x0a, 0x0e, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x10, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x50, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x22, 0x8c, 0x02, 0x0a, 0x0e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x36,
	0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f,
	0x73, 0x74, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x73, 0x12, 0x36, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x73, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x52,
	0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x4d, 0x73, 0x67, 0x73, 0x22, 0x11, 0x0a, 0x0f, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x6c, 0x0a,
	0x14, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x40, 0x0a, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x56, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x6f,
	0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x70, 0x6f,
	0x73, 0x74, 0x73, 0x22, 0x28, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x22, 0x38, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x25, 0x0a, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x04, 0x70, 0x6f, 0x73, 0x74, 0x22, 0x76, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x40, 0x0a,
	0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x73, 0x64, 0x6b, 0x77, 0x73,
	0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x70, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x5c, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x05, 0x70, 0x6f, 0x73, 0x74, 0x73, 0x22, 0x27, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16,
	0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x70, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x22, 0x10, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x33, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x22, 0x58, 0x0a,
	0x1a, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73,
	0x74, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x33, 0x0a, 0x19, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x22, 0x58, 0x0a, 0x1a,
	0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f,
	0x73, 0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74,
	0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x22, 0x25, 0x0a, 0x0b, 0x4c, 0x69, 0x6b, 0x65, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x22, 0x28, 0x0a,
	0x0c, 0x4c, 0x69, 0x6b, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07,
	0x69, 0x73, 0x4c, 0x69, 0x6b, 0x65, 0x64, 0x22, 0x28, 0x0a, 0x0e, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73, 0x74, 0x49,
	0x44, 0x22, 0x33, 0x0a, 0x0f, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x32, 0xac, 0x1b, 0x0a, 0x04, 0x63, 0x68, 0x61, 0x74, 0x12,
	0x51, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x51, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x41, 0x64, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x63, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55,
	0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x24, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x12, 0x46, 0x69,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x72, 0x0a, 0x1a, 0x46, 0x69, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x72,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4f, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x4f, 0x66, 0x4f, 0x6e, 0x65, 0x12, 0x5d, 0x0a,
	0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x49,
	0x6e, 0x66, 0x6f, 0x12, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x57, 0x0a, 0x10,
	0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46,
	0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x71, 0x1a, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x46, 0x75, 0x6c, 0x6c, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45, 0x0a, 0x0a, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x51, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x6e, 0x63,
	0x65, 0x12, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x4b, 0x0a, 0x0c, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x1a, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x52,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x36, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x15, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x1a,
	0x16, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x65, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x12, 0x1e, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x12, 0x54, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x54, 0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x63, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x20, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x51, 0x0a, 0x0e,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x1e,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x4d, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x1f,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x49, 0x4d, 0x43, 0x61, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x51, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x51, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x1a, 0x1f, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67,
	0x12, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47,
	0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d,
	0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x46, 0x6f, 0x72, 0x56, 0x69, 0x64, 0x65, 0x6f, 0x4d, 0x65, 0x65, 0x74, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x5d, 0x0a, 0x12, 0x73, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x23, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x73, 0x61, 0x76, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x54, 0x6f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x69, 0x0a, 0x16, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x12, 0x26, 0x2e, 0x6f,
	0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x72,
	0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x60, 0x0a,
	0x13, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x12, 0x23, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x72, 0x6f, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x6f, 0x70, 0x65, 0x6e,
	0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x67, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12,
	0x94, 0x01, 0x0a, 0x27, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72,
	0x6f, 0x6d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71,
	0x1a, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x65, 0x63, 0x69, 0x70, 0x69, 0x65,
	0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x94, 0x01, 0x0a, 0x27, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x6e, 0x74, 0x12, 0x33, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x34, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d,
	0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x83, 0x01,
	0x0a, 0x21, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d,
	0x41, 0x6c, 0x6c, 0x12, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6c, 0x6c, 0x74,
	0x52, 0x65, 0x71, 0x1a, 0x2e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6c, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x0d, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x44, 0x73, 0x12, 0x1d, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x49, 0x44, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0b, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x6f,
	0x73, 0x74, 0x12, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a,
	0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x5a, 0x0a,
	0x11, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x22, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x48, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x12, 0x1b, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69,
	0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x79,
	0x49, 0x44, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x79, 0x49, 0x44, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x6c, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x12, 0x27,
	0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x79, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x45, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x12,
	0x1a, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1b, 0x2e, 0x6f, 0x70,
	0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f,
	0x73, 0x74, 0x12, 0x26, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x69, 0x0a, 0x16, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x26, 0x2e,
	0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x27, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x45,
	0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x6b, 0x65, 0x50, 0x6f, 0x73, 0x74,
	0x12, 0x18, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4c,
	0x69, 0x6b, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x19, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x4c, 0x69, 0x6b, 0x65, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4e, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x74, 0x12, 0x1b, 0x2e, 0x6f, 0x70, 0x65,
	0x6e, 0x69, 0x6d, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x6f, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6f, 0x70, 0x65, 0x6e, 0x69, 0x6d, 0x73, 0x64, 0x6b, 0x2f, 0x63, 0x68,
	0x61, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f,
	0x63, 0x68, 0x61, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chat_chat_proto_rawDescOnce sync.Once
	file_chat_chat_proto_rawDescData = file_chat_chat_proto_rawDesc
)

func file_chat_chat_proto_rawDescGZIP() []byte {
	file_chat_chat_proto_rawDescOnce.Do(func() {
		file_chat_chat_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_chat_proto_rawDescData)
	})
	return file_chat_chat_proto_rawDescData
}

var file_chat_chat_proto_msgTypes = make([]protoimpl.MessageInfo, 86)
var file_chat_chat_proto_goTypes = []any{
	(*OnlineTime)(nil),                              // 0: openim.chat.onlineTime
	(*GetUsersTimeReq)(nil),                         // 1: openim.chat.getUsersTimeReq
	(*GetUsersTimeResp)(nil),                        // 2: openim.chat.getUsersTimeResp
	(*UserIdentity)(nil),                            // 3: openim.chat.UserIdentity
	(*UpdateUserInfoReq)(nil),                       // 4: openim.chat.UpdateUserInfoReq
	(*UpdateUserInfoResp)(nil),                      // 5: openim.chat.UpdateUserInfoResp
	(*FindUserPublicInfoReq)(nil),                   // 6: openim.chat.FindUserPublicInfoReq
	(*FindUserPublicInfoRespOfOne)(nil),             // 7: openim.chat.FindUserPublicInfoRespOfOne
	(*FindUserPublicInfoResp)(nil),                  // 8: openim.chat.FindUserPublicInfoResp
	(*SearchUserPublicInfoReq)(nil),                 // 9: openim.chat.SearchUserPublicInfoReq
	(*SearchUserPublicInfoResp)(nil),                // 10: openim.chat.SearchUserPublicInfoResp
	(*FindUserFullInfoReq)(nil),                     // 11: openim.chat.FindUserFullInfoReq
	(*FindUserFullInfoResp)(nil),                    // 12: openim.chat.FindUserFullInfoResp
	(*GetAllUserIDsReq)(nil),                        // 13: openim.chat.GetAllUserIDsReq
	(*GetAllUserIDsResp)(nil),                       // 14: openim.chat.GetAllUserIDsResp
	(*SendVerifyCodeReq)(nil),                       // 15: openim.chat.SendVerifyCodeReq
	(*SendVerifyCodeResp)(nil),                      // 16: openim.chat.SendVerifyCodeResp
	(*VerifyCodeReq)(nil),                           // 17: openim.chat.VerifyCodeReq
	(*VerifyCodeResp)(nil),                          // 18: openim.chat.VerifyCodeResp
	(*ChallengeNonceReq)(nil),                       // 19: openim.chat.ChallengeNonceReq
	(*ChallengeNonceResp)(nil),                      // 20: openim.chat.ChallengeNonceResp
	(*RegisterUserInfo)(nil),                        // 21: openim.chat.RegisterUserInfo
	(*RegisterUserReq)(nil),                         // 22: openim.chat.RegisterUserReq
	(*RegisterUserResp)(nil),                        // 23: openim.chat.RegisterUserResp
	(*AddUserAccountReq)(nil),                       // 24: openim.chat.AddUserAccountReq
	(*AddUserAccountResp)(nil),                      // 25: openim.chat.AddUserAccountResp
	(*LoginReq)(nil),                                // 26: openim.chat.LoginReq
	(*ResetPasswordReq)(nil),                        // 27: openim.chat.ResetPasswordReq
	(*ResetPasswordResp)(nil),                       // 28: openim.chat.ResetPasswordResp
	(*ChangePasswordReq)(nil),                       // 29: openim.chat.ChangePasswordReq
	(*ChangePasswordResp)(nil),                      // 30: openim.chat.ChangePasswordResp
	(*FindUserAccountReq)(nil),                      // 31: openim.chat.FindUserAccountReq
	(*FindUserByAddressOrAccountReq)(nil),           // 32: openim.chat.FindUserByAddressOrAccountReq
	(*FindUserAccountResp)(nil),                     // 33: openim.chat.FindUserAccountResp
	(*FindAccountUserReq)(nil),                      // 34: openim.chat.FindAccountUserReq
	(*FindAccountUserResp)(nil),                     // 35: openim.chat.FindAccountUserResp
	(*SignalRecord)(nil),                            // 36: openim.chat.SignalRecord
	(*OpenIMCallbackReq)(nil),                       // 37: openim.chat.OpenIMCallbackReq
	(*OpenIMCallbackResp)(nil),                      // 38: openim.chat.OpenIMCallbackResp
	(*SearchUserFullInfoReq)(nil),                   // 39: openim.chat.SearchUserFullInfoReq
	(*SearchUserFullInfoResp)(nil),                  // 40: openim.chat.SearchUserFullInfoResp
	(*UserLoginCountReq)(nil),                       // 41: openim.chat.UserLoginCountReq
	(*UserLoginCountResp)(nil),                      // 42: openim.chat.UserLoginCountResp
	(*LoginResp)(nil),                               // 43: openim.chat.LoginResp
	(*SearchUserInfoReq)(nil),                       // 44: openim.chat.SearchUserInfoReq
	(*SearchUserInfoResp)(nil),                      // 45: openim.chat.SearchUserInfoResp
	(*GetTokenForVideoMeetingReq)(nil),              // 46: openim.chat.GetTokenForVideoMeetingReq
	(*GetTokenForVideoMeetingResp)(nil),             // 47: openim.chat.GetTokenForVideoMeetingResp
	(*CheckUserExistReq)(nil),                       // 48: openim.chat.CheckUserExistReq
	(*CheckUserExistResp)(nil),                      // 49: openim.chat.CheckUserExistResp
	(*DelUserAccountReq)(nil),                       // 50: openim.chat.DelUserAccountReq
	(*DelUserAccountResp)(nil),                      // 51: openim.chat.DelUserAccountResp
	(*GetGroupFromContactReq)(nil),                  // 52: openim.chat.getGroupFromContactReq
	(*GetGroupFromContactResp)(nil),                 // 53: openim.chat.getGroupFromContactResp
	(*SaveGroupToContactReq)(nil),                   // 54: openim.chat.saveGroupToContactReq
	(*SaveGroupToContactResp)(nil),                  // 55: openim.chat.saveGroupToContactResp
	(*DeleteGroupFromContactReq)(nil),               // 56: openim.chat.deleteGroupFromContactReq
	(*DeleteGroupFromContactResp)(nil),              // 57: openim.chat.deleteGroupFromContactResp
	(*DeleteGroupApplicationFromRecipientReq)(nil),  // 58: openim.chat.DeleteGroupApplicationFromRecipientReq
	(*DeleteGroupApplicationFromRecipientResp)(nil), // 59: openim.chat.DeleteGroupApplicationFromRecipientResp
	(*DeleteGroupApplicationFromApplicantReq)(nil),  // 60: openim.chat.DeleteGroupApplicationFromApplicantReq
	(*DeleteGroupApplicationFromApplicantResp)(nil), // 61: openim.chat.DeleteGroupApplicationFromApplicantResp
	(*DeleteGroupApplicationFromAlltReq)(nil),       // 62: openim.chat.DeleteGroupApplicationFromAlltReq
	(*DeleteGroupApplicationFromAllResp)(nil),       // 63: openim.chat.DeleteGroupApplicationFromAllResp
	(*Post)(nil),                                    // 64: openim.chat.Post
	(*PublishPostReq)(nil),                          // 65: openim.chat.PublishPostReq
	(*PublishPostResp)(nil),                         // 66: openim.chat.PublishPostResp
	(*GetPostPaginationReq)(nil),                    // 67: openim.chat.GetPostPaginationReq
	(*GetPostPaginationResp)(nil),                   // 68: openim.chat.GetPostPaginationResp
	(*GetPostByIDReq)(nil),                          // 69: openim.chat.GetPostByIDReq
	(*GetPostByIDResp)(nil),                         // 70: openim.chat.GetPostByIDResp
	(*GetPostPaginationByUserReq)(nil),              // 71: openim.chat.GetPostPaginationByUserReq
	(*GetPostPaginationByUserResp)(nil),             // 72: openim.chat.GetPostPaginationByUserResp
	(*DeletePostReq)(nil),                           // 73: openim.chat.DeletePostReq
	(*DeletePostResp)(nil),                          // 74: openim.chat.DeletePostResp
	(*ChangeAllowCommentPostReq)(nil),               // 75: openim.chat.ChangeAllowCommentPostReq
	(*ChangeAllowCommentPostResp)(nil),              // 76: openim.chat.ChangeAllowCommentPostResp
	(*ChangeAllowForwardPostReq)(nil),               // 77: openim.chat.ChangeAllowForwardPostReq
	(*ChangeAllowForwardPostResp)(nil),              // 78: openim.chat.ChangeAllowForwardPostResp
	(*LikePostReq)(nil),                             // 79: openim.chat.LikePostReq
	(*LikePostResp)(nil),                            // 80: openim.chat.LikePostResp
	(*CollectPostReq)(nil),                          // 81: openim.chat.CollectPostReq
	(*CollectPostResp)(nil),                         // 82: openim.chat.CollectPostResp
	nil,                                             // 83: openim.chat.FindUserAccountResp.UserAccountMapEntry
	nil,                                             // 84: openim.chat.FindAccountUserResp.AccountUserMapEntry
	nil,                                             // 85: openim.chat.UserLoginCountResp.CountEntry
	(*wrapperspb.StringValue)(nil),                  // 86: openim.protobuf.StringValue
	(*wrapperspb.Int32Value)(nil),                   // 87: openim.protobuf.Int32Value
	(*common.UserPublicInfo)(nil),                   // 88: openim.common.UserPublicInfo
	(*sdkwss.RequestPagination)(nil),                // 89: openim.sdkwss.RequestPagination
	(*common.UserFullInfo)(nil),                     // 90: openim.common.UserFullInfo
	(*common.PostMedia)(nil),                        // 91: openim.common.PostMedia
}
var file_chat_chat_proto_depIdxs = []int32{
	0,  // 0: openim.chat.getUsersTimeResp.timeList:type_name -> openim.chat.onlineTime
	86, // 1: openim.chat.UpdateUserInfoReq.account:type_name -> openim.protobuf.StringValue
	86, // 2: openim.chat.UpdateUserInfoReq.nickname:type_name -> openim.protobuf.StringValue
	86, // 3: openim.chat.UpdateUserInfoReq.faceURL:type_name -> openim.protobuf.StringValue
	86, // 4: openim.chat.UpdateUserInfoReq.coverURL:type_name -> openim.protobuf.StringValue
	86, // 5: openim.chat.UpdateUserInfoReq.about:type_name -> openim.protobuf.StringValue
	87, // 6: openim.chat.UpdateUserInfoReq.allowAddFriend:type_name -> openim.protobuf.Int32Value
	87, // 7: openim.chat.UpdateUserInfoReq.allowBeep:type_name -> openim.protobuf.Int32Value
	87, // 8: openim.chat.UpdateUserInfoReq.allowVibration:type_name -> openim.protobuf.Int32Value
	87, // 9: openim.chat.UpdateUserInfoReq.globalRecvMsgOpt:type_name -> openim.protobuf.Int32Value
	87, // 10: openim.chat.UpdateUserInfoReq.RegisterType:type_name -> openim.protobuf.Int32Value
	86, // 11: openim.chat.UpdateUserInfoResp.faceURL:type_name -> openim.protobuf.StringValue
	86, // 12: openim.chat.UpdateUserInfoResp.coverURL:type_name -> openim.protobuf.StringValue
	86, // 13: openim.chat.UpdateUserInfoResp.about:type_name -> openim.protobuf.StringValue
	88, // 14: openim.chat.FindUserPublicInfoRespOfOne.user:type_name -> openim.common.UserPublicInfo
	88, // 15: openim.chat.FindUserPublicInfoResp.users:type_name -> openim.common.UserPublicInfo
	89, // 16: openim.chat.SearchUserPublicInfoReq.pagination:type_name -> openim.sdkwss.RequestPagination
	88, // 17: openim.chat.SearchUserPublicInfoResp.users:type_name -> openim.common.UserPublicInfo
	90, // 18: openim.chat.FindUserFullInfoResp.users:type_name -> openim.common.UserFullInfo
	21, // 19: openim.chat.RegisterUserReq.user:type_name -> openim.chat.RegisterUserInfo
	21, // 20: openim.chat.AddUserAccountReq.user:type_name -> openim.chat.RegisterUserInfo
	83, // 21: openim.chat.FindUserAccountResp.userAccountMap:type_name -> openim.chat.FindUserAccountResp.UserAccountMapEntry
	84, // 22: openim.chat.FindAccountUserResp.accountUserMap:type_name -> openim.chat.FindAccountUserResp.AccountUserMapEntry
	88, // 23: openim.chat.SignalRecord.inviterUserList:type_name -> openim.common.UserPublicInfo
	89, // 24: openim.chat.SearchUserFullInfoReq.pagination:type_name -> openim.sdkwss.RequestPagination
	90, // 25: openim.chat.SearchUserFullInfoResp.users:type_name -> openim.common.UserFullInfo
	85, // 26: openim.chat.UserLoginCountResp.count:type_name -> openim.chat.UserLoginCountResp.CountEntry
	89, // 27: openim.chat.SearchUserInfoReq.pagination:type_name -> openim.sdkwss.RequestPagination
	90, // 28: openim.chat.SearchUserInfoResp.users:type_name -> openim.common.UserFullInfo
	21, // 29: openim.chat.CheckUserExistReq.user:type_name -> openim.chat.RegisterUserInfo
	88, // 30: openim.chat.Post.userInfo:type_name -> openim.common.UserPublicInfo
	91, // 31: openim.chat.Post.mediaMsgs:type_name -> openim.common.PostMedia
	88, // 32: openim.chat.Post.atUserInfoList:type_name -> openim.common.UserPublicInfo
	86, // 33: openim.chat.PublishPostReq.content:type_name -> openim.protobuf.StringValue
	91, // 34: openim.chat.PublishPostReq.mediaMsgs:type_name -> openim.common.PostMedia
	89, // 35: openim.chat.GetPostPaginationReq.pagination:type_name -> openim.sdkwss.RequestPagination
	64, // 36: openim.chat.GetPostPaginationResp.posts:type_name -> openim.chat.Post
	64, // 37: openim.chat.GetPostByIDResp.post:type_name -> openim.chat.Post
	89, // 38: openim.chat.GetPostPaginationByUserReq.pagination:type_name -> openim.sdkwss.RequestPagination
	64, // 39: openim.chat.GetPostPaginationByUserResp.posts:type_name -> openim.chat.Post
	4,  // 40: openim.chat.chat.UpdateUserInfo:input_type -> openim.chat.UpdateUserInfoReq
	24, // 41: openim.chat.chat.AddUserAccount:input_type -> openim.chat.AddUserAccountReq
	9,  // 42: openim.chat.chat.SearchUserPublicInfo:input_type -> openim.chat.SearchUserPublicInfoReq
	6,  // 43: openim.chat.chat.FindUserPublicInfo:input_type -> openim.chat.FindUserPublicInfoReq
	32, // 44: openim.chat.chat.FindUserByAddressOrAccount:input_type -> openim.chat.FindUserByAddressOrAccountReq
	39, // 45: openim.chat.chat.SearchUserFullInfo:input_type -> openim.chat.SearchUserFullInfoReq
	11, // 46: openim.chat.chat.FindUserFullInfo:input_type -> openim.chat.FindUserFullInfoReq
	15, // 47: openim.chat.chat.SendVerifyCode:input_type -> openim.chat.SendVerifyCodeReq
	17, // 48: openim.chat.chat.VerifyCode:input_type -> openim.chat.VerifyCodeReq
	19, // 49: openim.chat.chat.ChallengeNonce:input_type -> openim.chat.ChallengeNonceReq
	22, // 50: openim.chat.chat.RegisterUser:input_type -> openim.chat.RegisterUserReq
	26, // 51: openim.chat.chat.Login:input_type -> openim.chat.LoginReq
	27, // 52: openim.chat.chat.ResetPassword:input_type -> openim.chat.ResetPasswordReq
	29, // 53: openim.chat.chat.ChangePassword:input_type -> openim.chat.ChangePasswordReq
	48, // 54: openim.chat.chat.CheckUserExist:input_type -> openim.chat.CheckUserExistReq
	50, // 55: openim.chat.chat.DelUserAccount:input_type -> openim.chat.DelUserAccountReq
	31, // 56: openim.chat.chat.FindUserAccount:input_type -> openim.chat.FindUserAccountReq
	34, // 57: openim.chat.chat.FindAccountUser:input_type -> openim.chat.FindAccountUserReq
	37, // 58: openim.chat.chat.OpenIMCallback:input_type -> openim.chat.OpenIMCallbackReq
	41, // 59: openim.chat.chat.UserLoginCount:input_type -> openim.chat.UserLoginCountReq
	44, // 60: openim.chat.chat.SearchUserInfo:input_type -> openim.chat.SearchUserInfoReq
	46, // 61: openim.chat.chat.GetTokenForVideoMeeting:input_type -> openim.chat.GetTokenForVideoMeetingReq
	54, // 62: openim.chat.chat.saveGroupToContact:input_type -> openim.chat.saveGroupToContactReq
	56, // 63: openim.chat.chat.deleteGroupFromContact:input_type -> openim.chat.deleteGroupFromContactReq
	52, // 64: openim.chat.chat.getGroupFromContact:input_type -> openim.chat.getGroupFromContactReq
	58, // 65: openim.chat.chat.deleteUserGroupApplicationFromRecipient:input_type -> openim.chat.DeleteGroupApplicationFromRecipientReq
	60, // 66: openim.chat.chat.deleteUserGroupApplicationFromApplicant:input_type -> openim.chat.DeleteGroupApplicationFromApplicantReq
	62, // 67: openim.chat.chat.deleteUserGroupApplicationFromAll:input_type -> openim.chat.DeleteGroupApplicationFromAlltReq
	13, // 68: openim.chat.chat.getAllUserIDs:input_type -> openim.chat.GetAllUserIDsReq
	65, // 69: openim.chat.chat.PublishPost:input_type -> openim.chat.PublishPostReq
	67, // 70: openim.chat.chat.GetPostPagination:input_type -> openim.chat.GetPostPaginationReq
	69, // 71: openim.chat.chat.GetPostByID:input_type -> openim.chat.GetPostByIDReq
	71, // 72: openim.chat.chat.GetPostPaginationByUser:input_type -> openim.chat.GetPostPaginationByUserReq
	73, // 73: openim.chat.chat.DeletePost:input_type -> openim.chat.DeletePostReq
	75, // 74: openim.chat.chat.ChangeAllowCommentPost:input_type -> openim.chat.ChangeAllowCommentPostReq
	77, // 75: openim.chat.chat.ChangeAllowForwardPost:input_type -> openim.chat.ChangeAllowForwardPostReq
	79, // 76: openim.chat.chat.ChangeLikePost:input_type -> openim.chat.LikePostReq
	81, // 77: openim.chat.chat.ChangeCollectPost:input_type -> openim.chat.CollectPostReq
	5,  // 78: openim.chat.chat.UpdateUserInfo:output_type -> openim.chat.UpdateUserInfoResp
	25, // 79: openim.chat.chat.AddUserAccount:output_type -> openim.chat.AddUserAccountResp
	10, // 80: openim.chat.chat.SearchUserPublicInfo:output_type -> openim.chat.SearchUserPublicInfoResp
	8,  // 81: openim.chat.chat.FindUserPublicInfo:output_type -> openim.chat.FindUserPublicInfoResp
	7,  // 82: openim.chat.chat.FindUserByAddressOrAccount:output_type -> openim.chat.FindUserPublicInfoRespOfOne
	40, // 83: openim.chat.chat.SearchUserFullInfo:output_type -> openim.chat.SearchUserFullInfoResp
	12, // 84: openim.chat.chat.FindUserFullInfo:output_type -> openim.chat.FindUserFullInfoResp
	16, // 85: openim.chat.chat.SendVerifyCode:output_type -> openim.chat.SendVerifyCodeResp
	18, // 86: openim.chat.chat.VerifyCode:output_type -> openim.chat.VerifyCodeResp
	20, // 87: openim.chat.chat.ChallengeNonce:output_type -> openim.chat.ChallengeNonceResp
	23, // 88: openim.chat.chat.RegisterUser:output_type -> openim.chat.RegisterUserResp
	43, // 89: openim.chat.chat.Login:output_type -> openim.chat.LoginResp
	28, // 90: openim.chat.chat.ResetPassword:output_type -> openim.chat.ResetPasswordResp
	30, // 91: openim.chat.chat.ChangePassword:output_type -> openim.chat.ChangePasswordResp
	49, // 92: openim.chat.chat.CheckUserExist:output_type -> openim.chat.CheckUserExistResp
	51, // 93: openim.chat.chat.DelUserAccount:output_type -> openim.chat.DelUserAccountResp
	33, // 94: openim.chat.chat.FindUserAccount:output_type -> openim.chat.FindUserAccountResp
	35, // 95: openim.chat.chat.FindAccountUser:output_type -> openim.chat.FindAccountUserResp
	38, // 96: openim.chat.chat.OpenIMCallback:output_type -> openim.chat.OpenIMCallbackResp
	42, // 97: openim.chat.chat.UserLoginCount:output_type -> openim.chat.UserLoginCountResp
	45, // 98: openim.chat.chat.SearchUserInfo:output_type -> openim.chat.SearchUserInfoResp
	47, // 99: openim.chat.chat.GetTokenForVideoMeeting:output_type -> openim.chat.GetTokenForVideoMeetingResp
	55, // 100: openim.chat.chat.saveGroupToContact:output_type -> openim.chat.saveGroupToContactResp
	57, // 101: openim.chat.chat.deleteGroupFromContact:output_type -> openim.chat.deleteGroupFromContactResp
	53, // 102: openim.chat.chat.getGroupFromContact:output_type -> openim.chat.getGroupFromContactResp
	59, // 103: openim.chat.chat.deleteUserGroupApplicationFromRecipient:output_type -> openim.chat.DeleteGroupApplicationFromRecipientResp
	61, // 104: openim.chat.chat.deleteUserGroupApplicationFromApplicant:output_type -> openim.chat.DeleteGroupApplicationFromApplicantResp
	63, // 105: openim.chat.chat.deleteUserGroupApplicationFromAll:output_type -> openim.chat.DeleteGroupApplicationFromAllResp
	14, // 106: openim.chat.chat.getAllUserIDs:output_type -> openim.chat.GetAllUserIDsResp
	66, // 107: openim.chat.chat.PublishPost:output_type -> openim.chat.PublishPostResp
	68, // 108: openim.chat.chat.GetPostPagination:output_type -> openim.chat.GetPostPaginationResp
	70, // 109: openim.chat.chat.GetPostByID:output_type -> openim.chat.GetPostByIDResp
	72, // 110: openim.chat.chat.GetPostPaginationByUser:output_type -> openim.chat.GetPostPaginationByUserResp
	74, // 111: openim.chat.chat.DeletePost:output_type -> openim.chat.DeletePostResp
	76, // 112: openim.chat.chat.ChangeAllowCommentPost:output_type -> openim.chat.ChangeAllowCommentPostResp
	78, // 113: openim.chat.chat.ChangeAllowForwardPost:output_type -> openim.chat.ChangeAllowForwardPostResp
	80, // 114: openim.chat.chat.ChangeLikePost:output_type -> openim.chat.LikePostResp
	82, // 115: openim.chat.chat.ChangeCollectPost:output_type -> openim.chat.CollectPostResp
	78, // [78:116] is the sub-list for method output_type
	40, // [40:78] is the sub-list for method input_type
	40, // [40:40] is the sub-list for extension type_name
	40, // [40:40] is the sub-list for extension extendee
	0,  // [0:40] is the sub-list for field type_name
}

func init() { file_chat_chat_proto_init() }
func file_chat_chat_proto_init() {
	if File_chat_chat_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_chat_chat_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*OnlineTime); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*GetUsersTimeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*GetUsersTimeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*UserIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*UpdateUserInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*FindUserPublicInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*FindUserPublicInfoRespOfOne); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*FindUserPublicInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*SearchUserPublicInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*SearchUserPublicInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*FindUserFullInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*FindUserFullInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllUserIDsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*GetAllUserIDsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*SendVerifyCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*SendVerifyCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*VerifyCodeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*VerifyCodeResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeNonceReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*ChallengeNonceResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[21].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterUserInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[22].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[23].Exporter = func(v any, i int) any {
			switch v := v.(*RegisterUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[24].Exporter = func(v any, i int) any {
			switch v := v.(*AddUserAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[25].Exporter = func(v any, i int) any {
			switch v := v.(*AddUserAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[26].Exporter = func(v any, i int) any {
			switch v := v.(*LoginReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[27].Exporter = func(v any, i int) any {
			switch v := v.(*ResetPasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[28].Exporter = func(v any, i int) any {
			switch v := v.(*ResetPasswordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[29].Exporter = func(v any, i int) any {
			switch v := v.(*ChangePasswordReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[30].Exporter = func(v any, i int) any {
			switch v := v.(*ChangePasswordResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[31].Exporter = func(v any, i int) any {
			switch v := v.(*FindUserAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[32].Exporter = func(v any, i int) any {
			switch v := v.(*FindUserByAddressOrAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[33].Exporter = func(v any, i int) any {
			switch v := v.(*FindUserAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[34].Exporter = func(v any, i int) any {
			switch v := v.(*FindAccountUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[35].Exporter = func(v any, i int) any {
			switch v := v.(*FindAccountUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[36].Exporter = func(v any, i int) any {
			switch v := v.(*SignalRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[37].Exporter = func(v any, i int) any {
			switch v := v.(*OpenIMCallbackReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[38].Exporter = func(v any, i int) any {
			switch v := v.(*OpenIMCallbackResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[39].Exporter = func(v any, i int) any {
			switch v := v.(*SearchUserFullInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[40].Exporter = func(v any, i int) any {
			switch v := v.(*SearchUserFullInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[41].Exporter = func(v any, i int) any {
			switch v := v.(*UserLoginCountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[42].Exporter = func(v any, i int) any {
			switch v := v.(*UserLoginCountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[43].Exporter = func(v any, i int) any {
			switch v := v.(*LoginResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[44].Exporter = func(v any, i int) any {
			switch v := v.(*SearchUserInfoReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[45].Exporter = func(v any, i int) any {
			switch v := v.(*SearchUserInfoResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[46].Exporter = func(v any, i int) any {
			switch v := v.(*GetTokenForVideoMeetingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[47].Exporter = func(v any, i int) any {
			switch v := v.(*GetTokenForVideoMeetingResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[48].Exporter = func(v any, i int) any {
			switch v := v.(*CheckUserExistReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[49].Exporter = func(v any, i int) any {
			switch v := v.(*CheckUserExistResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[50].Exporter = func(v any, i int) any {
			switch v := v.(*DelUserAccountReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[51].Exporter = func(v any, i int) any {
			switch v := v.(*DelUserAccountResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[52].Exporter = func(v any, i int) any {
			switch v := v.(*GetGroupFromContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[53].Exporter = func(v any, i int) any {
			switch v := v.(*GetGroupFromContactResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[54].Exporter = func(v any, i int) any {
			switch v := v.(*SaveGroupToContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[55].Exporter = func(v any, i int) any {
			switch v := v.(*SaveGroupToContactResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[56].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteGroupFromContactReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[57].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteGroupFromContactResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[58].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteGroupApplicationFromRecipientReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[59].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteGroupApplicationFromRecipientResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[60].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteGroupApplicationFromApplicantReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[61].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteGroupApplicationFromApplicantResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[62].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteGroupApplicationFromAlltReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[63].Exporter = func(v any, i int) any {
			switch v := v.(*DeleteGroupApplicationFromAllResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[64].Exporter = func(v any, i int) any {
			switch v := v.(*Post); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[65].Exporter = func(v any, i int) any {
			switch v := v.(*PublishPostReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[66].Exporter = func(v any, i int) any {
			switch v := v.(*PublishPostResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[67].Exporter = func(v any, i int) any {
			switch v := v.(*GetPostPaginationReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[68].Exporter = func(v any, i int) any {
			switch v := v.(*GetPostPaginationResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[69].Exporter = func(v any, i int) any {
			switch v := v.(*GetPostByIDReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[70].Exporter = func(v any, i int) any {
			switch v := v.(*GetPostByIDResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[71].Exporter = func(v any, i int) any {
			switch v := v.(*GetPostPaginationByUserReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[72].Exporter = func(v any, i int) any {
			switch v := v.(*GetPostPaginationByUserResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[73].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePostReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[74].Exporter = func(v any, i int) any {
			switch v := v.(*DeletePostResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[75].Exporter = func(v any, i int) any {
			switch v := v.(*ChangeAllowCommentPostReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[76].Exporter = func(v any, i int) any {
			switch v := v.(*ChangeAllowCommentPostResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[77].Exporter = func(v any, i int) any {
			switch v := v.(*ChangeAllowForwardPostReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[78].Exporter = func(v any, i int) any {
			switch v := v.(*ChangeAllowForwardPostResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[79].Exporter = func(v any, i int) any {
			switch v := v.(*LikePostReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[80].Exporter = func(v any, i int) any {
			switch v := v.(*LikePostResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[81].Exporter = func(v any, i int) any {
			switch v := v.(*CollectPostReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_chat_proto_msgTypes[82].Exporter = func(v any, i int) any {
			switch v := v.(*CollectPostResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_chat_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   86,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chat_chat_proto_goTypes,
		DependencyIndexes: file_chat_chat_proto_depIdxs,
		MessageInfos:      file_chat_chat_proto_msgTypes,
	}.Build()
	File_chat_chat_proto = out.File
	file_chat_chat_proto_rawDesc = nil
	file_chat_chat_proto_goTypes = nil
	file_chat_chat_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatClient interface {
	// Edit personal information - called by the user or an administrator
	UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error)
	AddUserAccount(ctx context.Context, in *AddUserAccountReq, opts ...grpc.CallOption) (*AddUserAccountResp, error)
	// Get user's public information - called by strangers
	SearchUserPublicInfo(ctx context.Context, in *SearchUserPublicInfoReq, opts ...grpc.CallOption) (*SearchUserPublicInfoResp, error)
	FindUserPublicInfo(ctx context.Context, in *FindUserPublicInfoReq, opts ...grpc.CallOption) (*FindUserPublicInfoResp, error)
	FindUserByAddressOrAccount(ctx context.Context, in *FindUserByAddressOrAccountReq, opts ...grpc.CallOption) (*FindUserPublicInfoRespOfOne, error)
	// Search user information - called by administrators, other users get public fields
	SearchUserFullInfo(ctx context.Context, in *SearchUserFullInfoReq, opts ...grpc.CallOption) (*SearchUserFullInfoResp, error)
	FindUserFullInfo(ctx context.Context, in *FindUserFullInfoReq, opts ...grpc.CallOption) (*FindUserFullInfoResp, error)
	SendVerifyCode(ctx context.Context, in *SendVerifyCodeReq, opts ...grpc.CallOption) (*SendVerifyCodeResp, error)
	VerifyCode(ctx context.Context, in *VerifyCodeReq, opts ...grpc.CallOption) (*VerifyCodeResp, error)
	ChallengeNonce(ctx context.Context, in *ChallengeNonceReq, opts ...grpc.CallOption) (*ChallengeNonceResp, error)
	RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserResp, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordResp, error)
	ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error)
	CheckUserExist(ctx context.Context, in *CheckUserExistReq, opts ...grpc.CallOption) (*CheckUserExistResp, error)
	DelUserAccount(ctx context.Context, in *DelUserAccountReq, opts ...grpc.CallOption) (*DelUserAccountResp, error)
	FindUserAccount(ctx context.Context, in *FindUserAccountReq, opts ...grpc.CallOption) (*FindUserAccountResp, error)
	FindAccountUser(ctx context.Context, in *FindAccountUserReq, opts ...grpc.CallOption) (*FindAccountUserResp, error)
	OpenIMCallback(ctx context.Context, in *OpenIMCallbackReq, opts ...grpc.CallOption) (*OpenIMCallbackResp, error)
	// Statistics
	UserLoginCount(ctx context.Context, in *UserLoginCountReq, opts ...grpc.CallOption) (*UserLoginCountResp, error)
	SearchUserInfo(ctx context.Context, in *SearchUserInfoReq, opts ...grpc.CallOption) (*SearchUserInfoResp, error)
	// Audio/video call and video meeting
	GetTokenForVideoMeeting(ctx context.Context, in *GetTokenForVideoMeetingReq, opts ...grpc.CallOption) (*GetTokenForVideoMeetingResp, error)
	// ä¿å­ç¾¤ç»è³èç³»åè¡¨
	SaveGroupToContact(ctx context.Context, in *SaveGroupToContactReq, opts ...grpc.CallOption) (*SaveGroupToContactResp, error)
	// ä»èç³»åè¡¨ç§»é¤ç¾¤ç»
	DeleteGroupFromContact(ctx context.Context, in *DeleteGroupFromContactReq, opts ...grpc.CallOption) (*DeleteGroupFromContactResp, error)
	// ä»èç³»åè¡¨è·åç¾¤ç»
	GetGroupFromContact(ctx context.Context, in *GetGroupFromContactReq, opts ...grpc.CallOption) (*GetGroupFromContactResp, error)
	// å é¤ç¨æ·çå ç¾¤ç³è¯·
	DeleteUserGroupApplicationFromRecipient(ctx context.Context, in *DeleteGroupApplicationFromRecipientReq, opts ...grpc.CallOption) (*DeleteGroupApplicationFromRecipientResp, error)
	// å é¤ç¨æ·èªå·±çå ç¾¤ç³è¯·
	DeleteUserGroupApplicationFromApplicant(ctx context.Context, in *DeleteGroupApplicationFromApplicantReq, opts ...grpc.CallOption) (*DeleteGroupApplicationFromApplicantResp, error)
	// å é¤ææå³äºèªå·±çå ç¾¤ç³è¯·
	DeleteUserGroupApplicationFromAll(ctx context.Context, in *DeleteGroupApplicationFromAlltReq, opts ...grpc.CallOption) (*DeleteGroupApplicationFromAllResp, error)
	// è·åææç¨æ·id
	GetAllUserIDs(ctx context.Context, in *GetAllUserIDsReq, opts ...grpc.CallOption) (*GetAllUserIDsResp, error)
	// åå¸å¸å­
	PublishPost(ctx context.Context, in *PublishPostReq, opts ...grpc.CallOption) (*PublishPostResp, error)
	// è·åå¸å­åé¡µ
	GetPostPagination(ctx context.Context, in *GetPostPaginationReq, opts ...grpc.CallOption) (*GetPostPaginationResp, error)
	// è·åå¸å­è¯¦æ
	GetPostByID(ctx context.Context, in *GetPostByIDReq, opts ...grpc.CallOption) (*GetPostByIDResp, error)
	// è·åç¨æ·å¸å­åé¡µ
	GetPostPaginationByUser(ctx context.Context, in *GetPostPaginationByUserReq, opts ...grpc.CallOption) (*GetPostPaginationByUserResp, error)
	// å é¤å¸å­
	DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*DeletePostResp, error)
	// ä¿®æ¹å¸å­åè®¸è¯è®º
	ChangeAllowCommentPost(ctx context.Context, in *ChangeAllowCommentPostReq, opts ...grpc.CallOption) (*ChangeAllowCommentPostResp, error)
	// ä¿®æ¹å¸å­åè®¸è½¬å
	ChangeAllowForwardPost(ctx context.Context, in *ChangeAllowForwardPostReq, opts ...grpc.CallOption) (*ChangeAllowForwardPostResp, error)
	// ç¹èµå¸å­
	ChangeLikePost(ctx context.Context, in *LikePostReq, opts ...grpc.CallOption) (*LikePostResp, error)
	// æ¶èå¸å­
	ChangeCollectPost(ctx context.Context, in *CollectPostReq, opts ...grpc.CallOption) (*CollectPostResp, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) UpdateUserInfo(ctx context.Context, in *UpdateUserInfoReq, opts ...grpc.CallOption) (*UpdateUserInfoResp, error) {
	out := new(UpdateUserInfoResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/UpdateUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) AddUserAccount(ctx context.Context, in *AddUserAccountReq, opts ...grpc.CallOption) (*AddUserAccountResp, error) {
	out := new(AddUserAccountResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/AddUserAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SearchUserPublicInfo(ctx context.Context, in *SearchUserPublicInfoReq, opts ...grpc.CallOption) (*SearchUserPublicInfoResp, error) {
	out := new(SearchUserPublicInfoResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/SearchUserPublicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) FindUserPublicInfo(ctx context.Context, in *FindUserPublicInfoReq, opts ...grpc.CallOption) (*FindUserPublicInfoResp, error) {
	out := new(FindUserPublicInfoResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/FindUserPublicInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) FindUserByAddressOrAccount(ctx context.Context, in *FindUserByAddressOrAccountReq, opts ...grpc.CallOption) (*FindUserPublicInfoRespOfOne, error) {
	out := new(FindUserPublicInfoRespOfOne)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/FindUserByAddressOrAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SearchUserFullInfo(ctx context.Context, in *SearchUserFullInfoReq, opts ...grpc.CallOption) (*SearchUserFullInfoResp, error) {
	out := new(SearchUserFullInfoResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/SearchUserFullInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) FindUserFullInfo(ctx context.Context, in *FindUserFullInfoReq, opts ...grpc.CallOption) (*FindUserFullInfoResp, error) {
	out := new(FindUserFullInfoResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/FindUserFullInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SendVerifyCode(ctx context.Context, in *SendVerifyCodeReq, opts ...grpc.CallOption) (*SendVerifyCodeResp, error) {
	out := new(SendVerifyCodeResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/SendVerifyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) VerifyCode(ctx context.Context, in *VerifyCodeReq, opts ...grpc.CallOption) (*VerifyCodeResp, error) {
	out := new(VerifyCodeResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/VerifyCode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ChallengeNonce(ctx context.Context, in *ChallengeNonceReq, opts ...grpc.CallOption) (*ChallengeNonceResp, error) {
	out := new(ChallengeNonceResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/ChallengeNonce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) RegisterUser(ctx context.Context, in *RegisterUserReq, opts ...grpc.CallOption) (*RegisterUserResp, error) {
	out := new(RegisterUserResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ResetPassword(ctx context.Context, in *ResetPasswordReq, opts ...grpc.CallOption) (*ResetPasswordResp, error) {
	out := new(ResetPasswordResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/ResetPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ChangePassword(ctx context.Context, in *ChangePasswordReq, opts ...grpc.CallOption) (*ChangePasswordResp, error) {
	out := new(ChangePasswordResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/ChangePassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) CheckUserExist(ctx context.Context, in *CheckUserExistReq, opts ...grpc.CallOption) (*CheckUserExistResp, error) {
	out := new(CheckUserExistResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/CheckUserExist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DelUserAccount(ctx context.Context, in *DelUserAccountReq, opts ...grpc.CallOption) (*DelUserAccountResp, error) {
	out := new(DelUserAccountResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/DelUserAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) FindUserAccount(ctx context.Context, in *FindUserAccountReq, opts ...grpc.CallOption) (*FindUserAccountResp, error) {
	out := new(FindUserAccountResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/FindUserAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) FindAccountUser(ctx context.Context, in *FindAccountUserReq, opts ...grpc.CallOption) (*FindAccountUserResp, error) {
	out := new(FindAccountUserResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/FindAccountUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) OpenIMCallback(ctx context.Context, in *OpenIMCallbackReq, opts ...grpc.CallOption) (*OpenIMCallbackResp, error) {
	out := new(OpenIMCallbackResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/OpenIMCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UserLoginCount(ctx context.Context, in *UserLoginCountReq, opts ...grpc.CallOption) (*UserLoginCountResp, error) {
	out := new(UserLoginCountResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/UserLoginCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SearchUserInfo(ctx context.Context, in *SearchUserInfoReq, opts ...grpc.CallOption) (*SearchUserInfoResp, error) {
	out := new(SearchUserInfoResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/SearchUserInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetTokenForVideoMeeting(ctx context.Context, in *GetTokenForVideoMeetingReq, opts ...grpc.CallOption) (*GetTokenForVideoMeetingResp, error) {
	out := new(GetTokenForVideoMeetingResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/GetTokenForVideoMeeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SaveGroupToContact(ctx context.Context, in *SaveGroupToContactReq, opts ...grpc.CallOption) (*SaveGroupToContactResp, error) {
	out := new(SaveGroupToContactResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/saveGroupToContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DeleteGroupFromContact(ctx context.Context, in *DeleteGroupFromContactReq, opts ...grpc.CallOption) (*DeleteGroupFromContactResp, error) {
	out := new(DeleteGroupFromContactResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/deleteGroupFromContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetGroupFromContact(ctx context.Context, in *GetGroupFromContactReq, opts ...grpc.CallOption) (*GetGroupFromContactResp, error) {
	out := new(GetGroupFromContactResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/getGroupFromContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DeleteUserGroupApplicationFromRecipient(ctx context.Context, in *DeleteGroupApplicationFromRecipientReq, opts ...grpc.CallOption) (*DeleteGroupApplicationFromRecipientResp, error) {
	out := new(DeleteGroupApplicationFromRecipientResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/deleteUserGroupApplicationFromRecipient", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DeleteUserGroupApplicationFromApplicant(ctx context.Context, in *DeleteGroupApplicationFromApplicantReq, opts ...grpc.CallOption) (*DeleteGroupApplicationFromApplicantResp, error) {
	out := new(DeleteGroupApplicationFromApplicantResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/deleteUserGroupApplicationFromApplicant", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DeleteUserGroupApplicationFromAll(ctx context.Context, in *DeleteGroupApplicationFromAlltReq, opts ...grpc.CallOption) (*DeleteGroupApplicationFromAllResp, error) {
	out := new(DeleteGroupApplicationFromAllResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/deleteUserGroupApplicationFromAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetAllUserIDs(ctx context.Context, in *GetAllUserIDsReq, opts ...grpc.CallOption) (*GetAllUserIDsResp, error) {
	out := new(GetAllUserIDsResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/getAllUserIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) PublishPost(ctx context.Context, in *PublishPostReq, opts ...grpc.CallOption) (*PublishPostResp, error) {
	out := new(PublishPostResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/PublishPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetPostPagination(ctx context.Context, in *GetPostPaginationReq, opts ...grpc.CallOption) (*GetPostPaginationResp, error) {
	out := new(GetPostPaginationResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/GetPostPagination", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetPostByID(ctx context.Context, in *GetPostByIDReq, opts ...grpc.CallOption) (*GetPostByIDResp, error) {
	out := new(GetPostByIDResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/GetPostByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetPostPaginationByUser(ctx context.Context, in *GetPostPaginationByUserReq, opts ...grpc.CallOption) (*GetPostPaginationByUserResp, error) {
	out := new(GetPostPaginationByUserResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/GetPostPaginationByUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DeletePost(ctx context.Context, in *DeletePostReq, opts ...grpc.CallOption) (*DeletePostResp, error) {
	out := new(DeletePostResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/DeletePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ChangeAllowCommentPost(ctx context.Context, in *ChangeAllowCommentPostReq, opts ...grpc.CallOption) (*ChangeAllowCommentPostResp, error) {
	out := new(ChangeAllowCommentPostResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/ChangeAllowCommentPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ChangeAllowForwardPost(ctx context.Context, in *ChangeAllowForwardPostReq, opts ...grpc.CallOption) (*ChangeAllowForwardPostResp, error) {
	out := new(ChangeAllowForwardPostResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/ChangeAllowForwardPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ChangeLikePost(ctx context.Context, in *LikePostReq, opts ...grpc.CallOption) (*LikePostResp, error) {
	out := new(LikePostResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/ChangeLikePost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) ChangeCollectPost(ctx context.Context, in *CollectPostReq, opts ...grpc.CallOption) (*CollectPostResp, error) {
	out := new(CollectPostResp)
	err := c.cc.Invoke(ctx, "/openim.chat.chat/ChangeCollectPost", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
type ChatServer interface {
	// Edit personal information - called by the user or an administrator
	UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error)
	AddUserAccount(context.Context, *AddUserAccountReq) (*AddUserAccountResp, error)
	// Get user's public information - called by strangers
	SearchUserPublicInfo(context.Context, *SearchUserPublicInfoReq) (*SearchUserPublicInfoResp, error)
	FindUserPublicInfo(context.Context, *FindUserPublicInfoReq) (*FindUserPublicInfoResp, error)
	FindUserByAddressOrAccount(context.Context, *FindUserByAddressOrAccountReq) (*FindUserPublicInfoRespOfOne, error)
	// Search user information - called by administrators, other users get public fields
	SearchUserFullInfo(context.Context, *SearchUserFullInfoReq) (*SearchUserFullInfoResp, error)
	FindUserFullInfo(context.Context, *FindUserFullInfoReq) (*FindUserFullInfoResp, error)
	SendVerifyCode(context.Context, *SendVerifyCodeReq) (*SendVerifyCodeResp, error)
	VerifyCode(context.Context, *VerifyCodeReq) (*VerifyCodeResp, error)
	ChallengeNonce(context.Context, *ChallengeNonceReq) (*ChallengeNonceResp, error)
	RegisterUser(context.Context, *RegisterUserReq) (*RegisterUserResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordResp, error)
	ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error)
	CheckUserExist(context.Context, *CheckUserExistReq) (*CheckUserExistResp, error)
	DelUserAccount(context.Context, *DelUserAccountReq) (*DelUserAccountResp, error)
	FindUserAccount(context.Context, *FindUserAccountReq) (*FindUserAccountResp, error)
	FindAccountUser(context.Context, *FindAccountUserReq) (*FindAccountUserResp, error)
	OpenIMCallback(context.Context, *OpenIMCallbackReq) (*OpenIMCallbackResp, error)
	// Statistics
	UserLoginCount(context.Context, *UserLoginCountReq) (*UserLoginCountResp, error)
	SearchUserInfo(context.Context, *SearchUserInfoReq) (*SearchUserInfoResp, error)
	// Audio/video call and video meeting
	GetTokenForVideoMeeting(context.Context, *GetTokenForVideoMeetingReq) (*GetTokenForVideoMeetingResp, error)
	// ä¿å­ç¾¤ç»è³èç³»åè¡¨
	SaveGroupToContact(context.Context, *SaveGroupToContactReq) (*SaveGroupToContactResp, error)
	// ä»èç³»åè¡¨ç§»é¤ç¾¤ç»
	DeleteGroupFromContact(context.Context, *DeleteGroupFromContactReq) (*DeleteGroupFromContactResp, error)
	// ä»èç³»åè¡¨è·åç¾¤ç»
	GetGroupFromContact(context.Context, *GetGroupFromContactReq) (*GetGroupFromContactResp, error)
	// å é¤ç¨æ·çå ç¾¤ç³è¯·
	DeleteUserGroupApplicationFromRecipient(context.Context, *DeleteGroupApplicationFromRecipientReq) (*DeleteGroupApplicationFromRecipientResp, error)
	// å é¤ç¨æ·èªå·±çå ç¾¤ç³è¯·
	DeleteUserGroupApplicationFromApplicant(context.Context, *DeleteGroupApplicationFromApplicantReq) (*DeleteGroupApplicationFromApplicantResp, error)
	// å é¤ææå³äºèªå·±çå ç¾¤ç³è¯·
	DeleteUserGroupApplicationFromAll(context.Context, *DeleteGroupApplicationFromAlltReq) (*DeleteGroupApplicationFromAllResp, error)
	// è·åææç¨æ·id
	GetAllUserIDs(context.Context, *GetAllUserIDsReq) (*GetAllUserIDsResp, error)
	// åå¸å¸å­
	PublishPost(context.Context, *PublishPostReq) (*PublishPostResp, error)
	// è·åå¸å­åé¡µ
	GetPostPagination(context.Context, *GetPostPaginationReq) (*GetPostPaginationResp, error)
	// è·åå¸å­è¯¦æ
	GetPostByID(context.Context, *GetPostByIDReq) (*GetPostByIDResp, error)
	// è·åç¨æ·å¸å­åé¡µ
	GetPostPaginationByUser(context.Context, *GetPostPaginationByUserReq) (*GetPostPaginationByUserResp, error)
	// å é¤å¸å­
	DeletePost(context.Context, *DeletePostReq) (*DeletePostResp, error)
	// ä¿®æ¹å¸å­åè®¸è¯è®º
	ChangeAllowCommentPost(context.Context, *ChangeAllowCommentPostReq) (*ChangeAllowCommentPostResp, error)
	// ä¿®æ¹å¸å­åè®¸è½¬å
	ChangeAllowForwardPost(context.Context, *ChangeAllowForwardPostReq) (*ChangeAllowForwardPostResp, error)
	// ç¹èµå¸å­
	ChangeLikePost(context.Context, *LikePostReq) (*LikePostResp, error)
	// æ¶èå¸å­
	ChangeCollectPost(context.Context, *CollectPostReq) (*CollectPostResp, error)
}

// UnimplementedChatServer can be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (*UnimplementedChatServer) UpdateUserInfo(context.Context, *UpdateUserInfoReq) (*UpdateUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserInfo not implemented")
}
func (*UnimplementedChatServer) AddUserAccount(context.Context, *AddUserAccountReq) (*AddUserAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUserAccount not implemented")
}
func (*UnimplementedChatServer) SearchUserPublicInfo(context.Context, *SearchUserPublicInfoReq) (*SearchUserPublicInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserPublicInfo not implemented")
}
func (*UnimplementedChatServer) FindUserPublicInfo(context.Context, *FindUserPublicInfoReq) (*FindUserPublicInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserPublicInfo not implemented")
}
func (*UnimplementedChatServer) FindUserByAddressOrAccount(context.Context, *FindUserByAddressOrAccountReq) (*FindUserPublicInfoRespOfOne, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByAddressOrAccount not implemented")
}
func (*UnimplementedChatServer) SearchUserFullInfo(context.Context, *SearchUserFullInfoReq) (*SearchUserFullInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserFullInfo not implemented")
}
func (*UnimplementedChatServer) FindUserFullInfo(context.Context, *FindUserFullInfoReq) (*FindUserFullInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserFullInfo not implemented")
}
func (*UnimplementedChatServer) SendVerifyCode(context.Context, *SendVerifyCodeReq) (*SendVerifyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendVerifyCode not implemented")
}
func (*UnimplementedChatServer) VerifyCode(context.Context, *VerifyCodeReq) (*VerifyCodeResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyCode not implemented")
}
func (*UnimplementedChatServer) ChallengeNonce(context.Context, *ChallengeNonceReq) (*ChallengeNonceResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChallengeNonce not implemented")
}
func (*UnimplementedChatServer) RegisterUser(context.Context, *RegisterUserReq) (*RegisterUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (*UnimplementedChatServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (*UnimplementedChatServer) ResetPassword(context.Context, *ResetPasswordReq) (*ResetPasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResetPassword not implemented")
}
func (*UnimplementedChatServer) ChangePassword(context.Context, *ChangePasswordReq) (*ChangePasswordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (*UnimplementedChatServer) CheckUserExist(context.Context, *CheckUserExistReq) (*CheckUserExistResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserExist not implemented")
}
func (*UnimplementedChatServer) DelUserAccount(context.Context, *DelUserAccountReq) (*DelUserAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelUserAccount not implemented")
}
func (*UnimplementedChatServer) FindUserAccount(context.Context, *FindUserAccountReq) (*FindUserAccountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserAccount not implemented")
}
func (*UnimplementedChatServer) FindAccountUser(context.Context, *FindAccountUserReq) (*FindAccountUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAccountUser not implemented")
}
func (*UnimplementedChatServer) OpenIMCallback(context.Context, *OpenIMCallbackReq) (*OpenIMCallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenIMCallback not implemented")
}
func (*UnimplementedChatServer) UserLoginCount(context.Context, *UserLoginCountReq) (*UserLoginCountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLoginCount not implemented")
}
func (*UnimplementedChatServer) SearchUserInfo(context.Context, *SearchUserInfoReq) (*SearchUserInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchUserInfo not implemented")
}
func (*UnimplementedChatServer) GetTokenForVideoMeeting(context.Context, *GetTokenForVideoMeetingReq) (*GetTokenForVideoMeetingResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenForVideoMeeting not implemented")
}
func (*UnimplementedChatServer) SaveGroupToContact(context.Context, *SaveGroupToContactReq) (*SaveGroupToContactResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveGroupToContact not implemented")
}
func (*UnimplementedChatServer) DeleteGroupFromContact(context.Context, *DeleteGroupFromContactReq) (*DeleteGroupFromContactResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGroupFromContact not implemented")
}
func (*UnimplementedChatServer) GetGroupFromContact(context.Context, *GetGroupFromContactReq) (*GetGroupFromContactResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroupFromContact not implemented")
}
func (*UnimplementedChatServer) DeleteUserGroupApplicationFromRecipient(context.Context, *DeleteGroupApplicationFromRecipientReq) (*DeleteGroupApplicationFromRecipientResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserGroupApplicationFromRecipient not implemented")
}
func (*UnimplementedChatServer) DeleteUserGroupApplicationFromApplicant(context.Context, *DeleteGroupApplicationFromApplicantReq) (*DeleteGroupApplicationFromApplicantResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserGroupApplicationFromApplicant not implemented")
}
func (*UnimplementedChatServer) DeleteUserGroupApplicationFromAll(context.Context, *DeleteGroupApplicationFromAlltReq) (*DeleteGroupApplicationFromAllResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUserGroupApplicationFromAll not implemented")
}
func (*UnimplementedChatServer) GetAllUserIDs(context.Context, *GetAllUserIDsReq) (*GetAllUserIDsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserIDs not implemented")
}
func (*UnimplementedChatServer) PublishPost(context.Context, *PublishPostReq) (*PublishPostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishPost not implemented")
}
func (*UnimplementedChatServer) GetPostPagination(context.Context, *GetPostPaginationReq) (*GetPostPaginationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostPagination not implemented")
}
func (*UnimplementedChatServer) GetPostByID(context.Context, *GetPostByIDReq) (*GetPostByIDResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostByID not implemented")
}
func (*UnimplementedChatServer) GetPostPaginationByUser(context.Context, *GetPostPaginationByUserReq) (*GetPostPaginationByUserResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPostPaginationByUser not implemented")
}
func (*UnimplementedChatServer) DeletePost(context.Context, *DeletePostReq) (*DeletePostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePost not implemented")
}
func (*UnimplementedChatServer) ChangeAllowCommentPost(context.Context, *ChangeAllowCommentPostReq) (*ChangeAllowCommentPostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAllowCommentPost not implemented")
}
func (*UnimplementedChatServer) ChangeAllowForwardPost(context.Context, *ChangeAllowForwardPostReq) (*ChangeAllowForwardPostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAllowForwardPost not implemented")
}
func (*UnimplementedChatServer) ChangeLikePost(context.Context, *LikePostReq) (*LikePostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeLikePost not implemented")
}
func (*UnimplementedChatServer) ChangeCollectPost(context.Context, *CollectPostReq) (*CollectPostResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeCollectPost not implemented")
}

func RegisterChatServer(s *grpc.Server, srv ChatServer) {
	s.RegisterService(&_Chat_serviceDesc, srv)
}

func _Chat_UpdateUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UpdateUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/UpdateUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UpdateUserInfo(ctx, req.(*UpdateUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_AddUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddUserAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).AddUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/AddUserAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).AddUserAccount(ctx, req.(*AddUserAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SearchUserPublicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserPublicInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchUserPublicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/SearchUserPublicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchUserPublicInfo(ctx, req.(*SearchUserPublicInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_FindUserPublicInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserPublicInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).FindUserPublicInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/FindUserPublicInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).FindUserPublicInfo(ctx, req.(*FindUserPublicInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_FindUserByAddressOrAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByAddressOrAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).FindUserByAddressOrAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/FindUserByAddressOrAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).FindUserByAddressOrAccount(ctx, req.(*FindUserByAddressOrAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SearchUserFullInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserFullInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchUserFullInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/SearchUserFullInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchUserFullInfo(ctx, req.(*SearchUserFullInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_FindUserFullInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserFullInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).FindUserFullInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/FindUserFullInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).FindUserFullInfo(ctx, req.(*FindUserFullInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SendVerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendVerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SendVerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/SendVerifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SendVerifyCode(ctx, req.(*SendVerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_VerifyCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyCodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).VerifyCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/VerifyCode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).VerifyCode(ctx, req.(*VerifyCodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ChallengeNonce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChallengeNonceReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ChallengeNonce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/ChallengeNonce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ChallengeNonce(ctx, req.(*ChallengeNonceReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).RegisterUser(ctx, req.(*RegisterUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ResetPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetPasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ResetPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/ResetPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ResetPassword(ctx, req.(*ResetPasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/ChangePassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ChangePassword(ctx, req.(*ChangePasswordReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_CheckUserExist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckUserExistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CheckUserExist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/CheckUserExist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CheckUserExist(ctx, req.(*CheckUserExistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DelUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelUserAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DelUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/DelUserAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DelUserAccount(ctx, req.(*DelUserAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_FindUserAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserAccountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).FindUserAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/FindUserAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).FindUserAccount(ctx, req.(*FindUserAccountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_FindAccountUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAccountUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).FindAccountUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/FindAccountUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).FindAccountUser(ctx, req.(*FindAccountUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_OpenIMCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenIMCallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).OpenIMCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/OpenIMCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).OpenIMCallback(ctx, req.(*OpenIMCallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UserLoginCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserLoginCountReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UserLoginCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/UserLoginCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UserLoginCount(ctx, req.(*UserLoginCountReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SearchUserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchUserInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SearchUserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/SearchUserInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SearchUserInfo(ctx, req.(*SearchUserInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetTokenForVideoMeeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenForVideoMeetingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetTokenForVideoMeeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/GetTokenForVideoMeeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetTokenForVideoMeeting(ctx, req.(*GetTokenForVideoMeetingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SaveGroupToContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveGroupToContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SaveGroupToContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/SaveGroupToContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SaveGroupToContact(ctx, req.(*SaveGroupToContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DeleteGroupFromContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupFromContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DeleteGroupFromContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/DeleteGroupFromContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DeleteGroupFromContact(ctx, req.(*DeleteGroupFromContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetGroupFromContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupFromContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetGroupFromContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/GetGroupFromContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetGroupFromContact(ctx, req.(*GetGroupFromContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DeleteUserGroupApplicationFromRecipient_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupApplicationFromRecipientReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DeleteUserGroupApplicationFromRecipient(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/DeleteUserGroupApplicationFromRecipient",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DeleteUserGroupApplicationFromRecipient(ctx, req.(*DeleteGroupApplicationFromRecipientReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DeleteUserGroupApplicationFromApplicant_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupApplicationFromApplicantReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DeleteUserGroupApplicationFromApplicant(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/DeleteUserGroupApplicationFromApplicant",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DeleteUserGroupApplicationFromApplicant(ctx, req.(*DeleteGroupApplicationFromApplicantReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DeleteUserGroupApplicationFromAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGroupApplicationFromAlltReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DeleteUserGroupApplicationFromAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/DeleteUserGroupApplicationFromAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DeleteUserGroupApplicationFromAll(ctx, req.(*DeleteGroupApplicationFromAlltReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetAllUserIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserIDsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetAllUserIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/GetAllUserIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetAllUserIDs(ctx, req.(*GetAllUserIDsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_PublishPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).PublishPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/PublishPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).PublishPost(ctx, req.(*PublishPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetPostPagination_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostPaginationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetPostPagination(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/GetPostPagination",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetPostPagination(ctx, req.(*GetPostPaginationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetPostByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostByIDReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetPostByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/GetPostByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetPostByID(ctx, req.(*GetPostByIDReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetPostPaginationByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPostPaginationByUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetPostPaginationByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/GetPostPaginationByUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetPostPaginationByUser(ctx, req.(*GetPostPaginationByUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DeletePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DeletePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/DeletePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DeletePost(ctx, req.(*DeletePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ChangeAllowCommentPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAllowCommentPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ChangeAllowCommentPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/ChangeAllowCommentPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ChangeAllowCommentPost(ctx, req.(*ChangeAllowCommentPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ChangeAllowForwardPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeAllowForwardPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ChangeAllowForwardPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/ChangeAllowForwardPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ChangeAllowForwardPost(ctx, req.(*ChangeAllowForwardPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ChangeLikePost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LikePostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ChangeLikePost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/ChangeLikePost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ChangeLikePost(ctx, req.(*LikePostReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_ChangeCollectPost_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectPostReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).ChangeCollectPost(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/openim.chat.chat/ChangeCollectPost",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).ChangeCollectPost(ctx, req.(*CollectPostReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Chat_serviceDesc = grpc.ServiceDesc{
	ServiceName: "openim.chat.chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserInfo",
			Handler:    _Chat_UpdateUserInfo_Handler,
		},
		{
			MethodName: "AddUserAccount",
			Handler:    _Chat_AddUserAccount_Handler,
		},
		{
			MethodName: "SearchUserPublicInfo",
			Handler:    _Chat_SearchUserPublicInfo_Handler,
		},
		{
			MethodName: "FindUserPublicInfo",
			Handler:    _Chat_FindUserPublicInfo_Handler,
		},
		{
			MethodName: "FindUserByAddressOrAccount",
			Handler:    _Chat_FindUserByAddressOrAccount_Handler,
		},
		{
			MethodName: "SearchUserFullInfo",
			Handler:    _Chat_SearchUserFullInfo_Handler,
		},
		{
			MethodName: "FindUserFullInfo",
			Handler:    _Chat_FindUserFullInfo_Handler,
		},
		{
			MethodName: "SendVerifyCode",
			Handler:    _Chat_SendVerifyCode_Handler,
		},
		{
			MethodName: "VerifyCode",
			Handler:    _Chat_VerifyCode_Handler,
		},
		{
			MethodName: "ChallengeNonce",
			Handler:    _Chat_ChallengeNonce_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _Chat_RegisterUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _Chat_Login_Handler,
		},
		{
			MethodName: "ResetPassword",
			Handler:    _Chat_ResetPassword_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _Chat_ChangePassword_Handler,
		},
		{
			MethodName: "CheckUserExist",
			Handler:    _Chat_CheckUserExist_Handler,
		},
		{
			MethodName: "DelUserAccount",
			Handler:    _Chat_DelUserAccount_Handler,
		},
		{
			MethodName: "FindUserAccount",
			Handler:    _Chat_FindUserAccount_Handler,
		},
		{
			MethodName: "FindAccountUser",
			Handler:    _Chat_FindAccountUser_Handler,
		},
		{
			MethodName: "OpenIMCallback",
			Handler:    _Chat_OpenIMCallback_Handler,
		},
		{
			MethodName: "UserLoginCount",
			Handler:    _Chat_UserLoginCount_Handler,
		},
		{
			MethodName: "SearchUserInfo",
			Handler:    _Chat_SearchUserInfo_Handler,
		},
		{
			MethodName: "GetTokenForVideoMeeting",
			Handler:    _Chat_GetTokenForVideoMeeting_Handler,
		},
		{
			MethodName: "saveGroupToContact",
			Handler:    _Chat_SaveGroupToContact_Handler,
		},
		{
			MethodName: "deleteGroupFromContact",
			Handler:    _Chat_DeleteGroupFromContact_Handler,
		},
		{
			MethodName: "getGroupFromContact",
			Handler:    _Chat_GetGroupFromContact_Handler,
		},
		{
			MethodName: "deleteUserGroupApplicationFromRecipient",
			Handler:    _Chat_DeleteUserGroupApplicationFromRecipient_Handler,
		},
		{
			MethodName: "deleteUserGroupApplicationFromApplicant",
			Handler:    _Chat_DeleteUserGroupApplicationFromApplicant_Handler,
		},
		{
			MethodName: "deleteUserGroupApplicationFromAll",
			Handler:    _Chat_DeleteUserGroupApplicationFromAll_Handler,
		},
		{
			MethodName: "getAllUserIDs",
			Handler:    _Chat_GetAllUserIDs_Handler,
		},
		{
			MethodName: "PublishPost",
			Handler:    _Chat_PublishPost_Handler,
		},
		{
			MethodName: "GetPostPagination",
			Handler:    _Chat_GetPostPagination_Handler,
		},
		{
			MethodName: "GetPostByID",
			Handler:    _Chat_GetPostByID_Handler,
		},
		{
			MethodName: "GetPostPaginationByUser",
			Handler:    _Chat_GetPostPaginationByUser_Handler,
		},
		{
			MethodName: "DeletePost",
			Handler:    _Chat_DeletePost_Handler,
		},
		{
			MethodName: "ChangeAllowCommentPost",
			Handler:    _Chat_ChangeAllowCommentPost_Handler,
		},
		{
			MethodName: "ChangeAllowForwardPost",
			Handler:    _Chat_ChangeAllowForwardPost_Handler,
		},
		{
			MethodName: "ChangeLikePost",
			Handler:    _Chat_ChangeLikePost_Handler,
		},
		{
			MethodName: "ChangeCollectPost",
			Handler:    _Chat_ChangeCollectPost_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chat/chat.proto",
}
